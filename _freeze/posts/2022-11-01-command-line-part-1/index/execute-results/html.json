{
  "hash": "7128b57bd696883209181d5e74093a4c",
  "result": {
    "markdown": "---\ntitle: \"Introduction to the command-line\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Introduction to the command-line for data analysis\"\ndate: 2022-11-01\ncategories: [module 1, week 2, command-line]\neditor_options: \n  chunk_output_type: inline\n---\n\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  [Software Carpentry: The Unix Shell](https://swcarpentry.github.io/shell-novice)\n2.  [R Squared Academy](https://blog.rsquaredacademy.com/command-line-basics-for-r-users)\n\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- [R Squared Academy](https://blog.rsquaredacademy.com/command-line-basics-for-r-users)\n- [Software Carpentry: The Unix Shell](https://swcarpentry.github.io/shell-novice)\n- [Data Science at the Command line](https://datascienceatthecommandline.com/2e)\n\n# Learning objectives\n\n::: callout-note\n### Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Understand what is a command shell and why would use one.\n-   Explain how the shell relates to the keyboard, the screen, the operating system, and users' programs.\n-   Explain when and why command-line interfaces should be used instead of graphical interfaces.\n-   Create, copy, move, rename, and delete files and folders.\n-   Print and sort file contents.\n-   Search for regular expressions in files.\n-   Execute R commands and scripts in the command line.\n:::\n\n:::{.callout-tip}\n\nYou can practice your command-line skills with the [Command Challenge](https://cmdchallenge.com/)\n\n:::\n\n# Introduction\n\nWe we use interact with computers, we often do so with a keyboard and mouse, touch screen interfaces, or using speech recognition systems.\n\nThe most widely used way to interact with personal computers is called a **graphical user interface** (GUI). With a GUI, we give instructions by **clicking a mouse** and using menu-driven interactions.\n\nThe **problem with only working with GUIs** is that while the visual aid of a GUI makes it intuitive to learn, this way of delivering instructions to a computer scales very poorly.\n\n::: callout-note\n### Example\n\nImagine the following task: for a literature search, you have to\n\n1.  Copy the third line of one thousand text files in one thousand different directories\n2.  Paste the lines into a separate single file.\n\nUsing a GUI, you would not only be clicking at your desk for several hours, but you could potentially also commit an error in the process of completing this repetitive task.\n:::\n\nThis is where we take advantage of the **Unix shell**.\n\nThe Unix shell is both\n\n1.  A **command-line interface** (CLI)\n2.  A **scripting language**\n\nThis allows such repetitive tasks to be done automatically and fast. Using the shell, the task in the literature example can be accomplished in seconds.\n\n## The Shell\n\nThe **shell is a program** (or environment) where users can **type commands** and the commands can be executed. \n\nAnother way of thinking about it is, a shell provides an **interface between the user and the UNIX system**.\n\n::: callout-note\n### Example types of shells\n\n-   **Bash** (Bourne Again SHell). The most popular Unix shell is Bash (the Bourne Again SHell --- so-called because it's derived from a shell written by Stephen Bourne). Bash is the default shell on most modern implementations of Unix and in most packages that provide Unix-like tools for Windows.\n-   **Zsh** (Z SHell). Zsh is built on top of bash with some additional features including providing the user with more flexibility by providing various features such as plug-in support, better customization, theme support, spelling correction, etc. Zsh is the default shell for macOS and Kali Linux.\n:::\n\nThe **grammar of a shell** allows you to combine existing tools into powerful pipelines and handle large volumes of data automatically. \n\nBenefits: \n\n- **Sequences of commands** can be written into a script, improving the reproducibility of workflows.\n- The command line is **often the easiest way to interact with remote machines** and supercomputers.\n- Familiarity with the shell is near essential to **run a variety of specialized tools** and resources including **high-performance computing systems**.\n\nLet's get started.\n\n## Where to find the shell\n\n- If you are **using Windows**, by default, Windows does not use bash, but instead [you will need to install one of several Windows-specific tools](https://happygitwithr.com/shell.html#shell) (like Git for Windows or PowerShell) to allow this kind of text-based interaction with your operating system. \n- If you are **using macOS**, Apple calls the shell 'Terminal'. There is an application you can open called 'Terminal' and it also appears in a tab next to the R console in the RStudio IDE. \n\n![](../../images/terminal.png)\n\n[[Source](https://support.rstudio.com/hc/en-us/articles/115010737148-Using-the-RStudio-Terminal-in-the-RStudio-IDE)]\n\n:::{.callout-tip}\n\n### Demo\n\n- Let's open up the `Terminal` application and also show you where the Terminal is within RStudio. \n- Next, let's show how to open up multiple terminals and close all terminals.\n\n:::\n\n:::{.callout-tip}\n\n### The Unix shell setup\n\nYou can follow these directions for setting up your shell for Windows, macOS, and Linux operating systems: \n\n- <https://swcarpentry.github.io/shell-novice/setup>\n\n:::\n\n## Opening the shell\n\nWhen the shell is first opened, you are presented with a prompt, indicating that the **shell is waiting for input**.\n\n``` {.bash filename=\"Bash\"}\n$\n```\n\nThe **shell typically uses `$` as the prompt**, but may use a different symbol (for the purposes of the rest of the lecture, I will omit the `$`).\n\n::: callout-important\n1.  When typing commands in the shell, **do not type the `$`**, only the commands that follow it.\n2.  After you type a command, you have to **press the Enter key** to execute it.\n:::\n\nThe prompt is followed by a **text cursor**, a character that indicates the position where your typing will appear.\n\n## Shell basics \n\nSo let's try our first command, `ls` which is short for **listing files**. With R, we know how to do this with `list.files()` function in base R: \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlist.files()\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"analysis.R\"           \"combined_names.txt\"   \"index.qmd\"           \n [4] \"index.rmarkdown\"      \"package_names.txt\"    \"r_release.txt\"       \n [7] \"release_names.txt\"    \"secret_directory\"     \"soccer_directory\"    \n[10] \"team_standings_3.csv\" \"team_standings.csv\"  \n```\n:::\n:::\n\n\nThis command will list the contents of the current directory where the lecture is located. In RStudio, we can write a bash code block like this: \n\n```{{bash}}\nls\n```\n\nand the executed code block is this: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n:::{.callout-note}\n\nIf the shell can't find a program whose name is the command you typed, it will print an error message such as:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nks\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nError in running command bash\n```\n:::\n:::\n\n\nThis might happen if the command was mis-typed or if the program corresponding to that command is not installed.\n:::\n\n\nNext, lets learn to display\n\n- basic information about the user\n- the current date & time\n- the calendar\n- and clear the screen\n\n| Command\t| Description | R command | \n| ------- | ------------| --------- |   \n| `whoami`        |     Who is the user? | `Sys.info()` / `whoami::whoami()` | \n| `date`\t        |     Get date, time and timezone | `Sys.time()` |\n| `cal`           |     Display calendar | \n| `clear`         |     Clear the screen | Ctrl + L\n\n`whoami` **prints the user id** (i.e. the name of the user who runs the command). Use it to verify the user as which you are logged into the system.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhoami\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nstephaniehicks\n```\n:::\n:::\n\n\n`date` will **display** or change the value of the **system’s time and date** information.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndate\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nTue Nov  1 12:42:39 EDT 2022\n```\n:::\n:::\n\n\n`cal` will display a formatted calendar and clear will clear all text on the screen and display a new prompt.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncal\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n   November 2022      \nSu Mo Tu We Th Fr Sa  \n      _\b _\b1  2  3  4  5  \n 6  7  8  9 10 11 12  \n13 14 15 16 17 18 19  \n20 21 22 23 24 25 26  \n27 28 29 30           \n                      \n```\n:::\n:::\n\n\n:::{.callout-tip}\n\n### Pro-tip\n\nTo **clear** the R console and the shell, we use Ctrl + L.\n\n:::\n\n## Getting help\n\nBefore we proceed further, let us learn to view the documentation/manual pages of the commands.\n\n| Command\t| Description |  \n| ------- | ------------| \n| `nameofcommand -h` | For some `nameofcommand` command (only for some commands)\n| `man nameofcommand`   | Display manual pages (i.e. `man`) for the `nameofcommand` command | \n| `whatis` | Single line description of a command | \n\n`man` is used to view the system’s reference manual.\n\n``` {.bash}\nman date \n```\n\n``` {.md} \nDATE(1)                          General Commands Manual                          DATE(1)\n\nNAME\n     date – display or set date and time\n\nSYNOPSIS\n     date [-jnRu] [-r seconds | filename] [-v [+|-]val[ymwdHMS]] ... [+output_fmt]\n     date [-ju] [[[mm]dd]HH]MM[[cc]yy][.ss]\n     date [-jRu] -f input_fmt new_date [+output_fmt]\n     date [-jnu] [-I[FMT]] [-f input_fmt] [-r ...] [-v ...] [new_date]\n\nDESCRIPTION\n     When invoked without arguments, the date utility displays the current date and time.\n```\n\n:::{.callout-note}\n\n### Try it out\n\nLet's explore the manual pages of `date` in the command line to show you what that looks like. \n\n- We will figure out what is the argument to print out the number of seconds since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time) or 00:00:00 UTC on 1 January 1970.\n- We will figure out what is the argument to display the date in UTC.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n## try it out \n\n```\n:::\n\n\n\n:::\n\n\n:::{.callout-tip}\n\n### Pro-tip\n\nFor **most commands** (but not all!), `NAMEOFCOMMAND -h` or `NAMEOFCOMMAND --help` will bring up a small guide to command options.\n\nFor example, `python -h` or `python --help` bring up:\n\n``` md\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\nOptions and arguments (and corresponding environment variables):\n-b     : issue warnings about str(bytes_instance), str(bytearray_instance)\n         and comparing bytes/bytearray with str. (-bb: issue errors)\n-B     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x\n-c cmd : program passed in as string (terminates option list)\n-d     : turn on parser debugging output (for experts only, only works on\n         debug builds); also PYTHONDEBUG=x\n-E     : ignore PYTHON* environment variables (such as PYTHONPATH)\n-h     : print this help message and exit (also --help)\n-i     : inspect interactively after running script; forces a prompt even\n         if stdin does not appear to be a terminal; also PYTHONINSPECT=x\n```\n\n:::\n\n\n\n# Move around files\n\n## Navigate the file system\n\nNext, we will introduce commands that help us:\n\n- navigate between different folders/directories\n- return current working directory\n- list all the files & folders in a directory\n- create and delete directories\n\n| Command\t| Description | R commands | \n| ------- | ------------| --------- |   \n| `pwd`   | Print working directory | `here::here()` | \n| `ls`    | List directory contents | `dir()` / `list.files()` / `list.dirs()` |\n| `cd`    |\tChange current working directory | `setwd()` | \n| `mkdir`\t| Create directory | `dir.create()` | \n| `rmdir`\t| Remove/delete directory | \n\n`pwd` **displays the name and path** of the present (or current) working directory (`pwd`).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n/Users/stephaniehicks/Documents/github/teaching/jhustatprogramming2022/posts/2022-11-01-command-line-part-1\n```\n:::\n:::\n\n\n`ls` **displays information about files** and directories in the current directory along with their associated metadata such as\n\n- size\n- ownership\n- modification date\n\n\nWith no options, it will list the files and directories in the current directory, **sorted alphabetically**.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n`cd` (change directory) changes the current working directory. It is among the most used commands as it allows the user **to move around the file system**.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd .. \nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n2022-10-27-build-website\n2022-11-01-command-line-part-1\n2022-11-03-command-line-part-2\n2022-11-08-version-control-part-1\n2022-11-10-version-control-part-2\n2022-11-15-object-oriented-programming\n2022-11-17-r-pkg-dev-part-1\n2022-11-22-r-pkg-dev-part-2\n2022-11-29-purrr-fun-programming\n2022-12-01-pkgdown-pkg-website\n2022-12-01-targets-proj-workflows\n2022-12-06-ggplot2-adv\n2022-12-08-r2d3-data-viz\n2022-12-13-flexdashboard\n2022-12-15-shinydashboard\n2022-12-20-dealing-with-large-data\n2022-12-20-parallel-computing\n2022-12-20-profiling-r-code\n2022-12-22-interacting-with-apis\n2022-12-22-relational-databases\n_metadata.yml\n```\n:::\n:::\n\n\n:::{.callout-note}\n\nThe `cd ..`\tmeans to change to the directory that is one level up. \n\n:::\n\n`mkdir` will **create new directory**. \n\nIt will allow you to set file mode (permissions associated with the directory) i.e. who can open/modify/delete the directory.\n\nIt will give you a warning **if a folder already exists**.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir secret_directory\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nmkdir: secret_directory: File exists\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n\n:::{.callout-note}\n\n### Pro-tip\n\n**Pressing tab** at any time within the shell will prompt it to attempt to either\n\n- auto-complete the name of the command you are searching for\n- auto-complete the line based on the files or sub-directories in the current directory. \n\nWhere **two or more files have the same characters**, the auto-complete will only fill up to the first point of difference, after which we can add more characters, and try using tab again. \n\n:::\n\n`rmdir` will **remove empty directories** from the file system. It can be used to remove multiple empty directories as well. \n\nIf the **directory is not empty**, `rmdir` will not remove it and instead display a warning that the directory is not empty.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrmdir secret_directory\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nrmdir: secret_directory: Directory not empty\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n## Change working directory\n\nLet us focus a bit more on changing working directory. The below table shows commands for changing working directory to\n\n- up one level\n- previous working directory\n- home directory\n- and root directory\n\n| Command\t| Description |  \n| ------- | ------------| \n| `cd .`    |\tNavigate into directory |\n| `cd ..`    |\tGo up one level | \n| `cd -`    |\tGo to previous working directory | \n| `cd ~`    |\tChange directory to home directory | \n| `cd /`    |\tChange directory to root directory | \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ..\nls \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n2022-10-27-build-website\n2022-11-01-command-line-part-1\n2022-11-03-command-line-part-2\n2022-11-08-version-control-part-1\n2022-11-10-version-control-part-2\n2022-11-15-object-oriented-programming\n2022-11-17-r-pkg-dev-part-1\n2022-11-22-r-pkg-dev-part-2\n2022-11-29-purrr-fun-programming\n2022-12-01-pkgdown-pkg-website\n2022-12-01-targets-proj-workflows\n2022-12-06-ggplot2-adv\n2022-12-08-r2d3-data-viz\n2022-12-13-flexdashboard\n2022-12-15-shinydashboard\n2022-12-20-dealing-with-large-data\n2022-12-20-parallel-computing\n2022-12-20-profiling-r-code\n2022-12-22-interacting-with-apis\n2022-12-22-relational-databases\n_metadata.yml\n```\n:::\n:::\n\n\n\nThis is a list of top-level files in my folder containing all the files for this website.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n_freeze\n_post_template.qmd\n_quarto.yml\n_site\ndata\nimages\nindex.qmd\njhustatprogramming2022.Rproj\nlectures.qmd\nposts\nprofile.jpg\nprojects\nprojects.qmd\nresources.qmd\nschedule.qmd\nstyles.css\nsyllabus.qmd\n```\n:::\n:::\n\n\nThese are all the files in my home directory on my computer.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ~ \nls \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nApplications\nCreative Cloud Files\nDesktop\nDocuments\nDownloads\nDropbox\nLibrary\nMovies\nMusic\nPictures\nPublic\nminiforge3\n```\n:::\n:::\n\n\n\n\n## List directory contents\n\n`ls` will list the contents of a directory. Using different arguments, we can\n\n- list hidden files\n- view file permissions, ownership, size & modification date\n- sort by size & modification date\n\n| Command\t| Description |  \n| ------- | ------------| \n| `ls` | List directory contents | \n| `ls -l` | List files one per line | \n| `ls -a` | List all files including hidden files | \n| `ls -la` | Display file permissions, ownership, size & modification date | \n| `ls -lh` | Long format list with size displayed in human readable format | \n| `ls -lS` | Long format list sorted by size | \n| `ls -ltr` | Long format list sorted by modification date | \n\nList files one per line\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls -l\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal 232\ndrwxr-xr-x   7 stephaniehicks  staff    224 Oct 21 22:40 _freeze\n-rw-r--r--@  1 stephaniehicks  staff    976 Oct 17 11:43 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff    827 Oct 23 11:13 _quarto.yml\ndrwxr-xr-x  16 stephaniehicks  staff    512 Nov  1 12:39 _site\ndrwxr-xr-x   6 stephaniehicks  staff    192 Oct 26 23:55 data\ndrwxr-xr-x  13 stephaniehicks  staff    416 Oct 29 00:49 images\n-rw-r--r--   1 stephaniehicks  staff   2200 Oct 24 21:26 index.qmd\n-rw-r--r--   1 stephaniehicks  staff    205 Oct 31 22:15 jhustatprogramming2022.Rproj\n-rw-r--r--   1 stephaniehicks  staff    189 Aug 11 21:03 lectures.qmd\ndrwxr-xr-x  23 stephaniehicks  staff    736 Oct 20 21:01 posts\n-rw-r--r--   1 stephaniehicks  staff  60521 Aug 11 21:03 profile.jpg\ndrwxr-xr-x   6 stephaniehicks  staff    192 Oct 21 21:17 projects\n-rw-r--r--   1 stephaniehicks  staff    191 Oct 21 21:08 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff    501 Aug 11 21:03 resources.qmd\n-rw-r--r--   1 stephaniehicks  staff   3288 Oct 27 18:19 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff     17 Aug 11 21:03 styles.css\n-rw-r--r--   1 stephaniehicks  staff  18755 Oct 24 10:54 syllabus.qmd\n```\n:::\n:::\n\n\n### Hidden files\n\nNext, let's talk about **hidden (or invisible) files**. These are everywhere on modern operating systems. \n\nWhen a programmer needs to have a file or folder, but does not want to show it to the user, they prefixes the file name with a single period (.). The operating system then hides this files from the user.\n\nBut now you can **see these invisible files** using the command line. Just use the `-a` flag (short for \"all\") for the `ls` command to have it show you all the files that are there:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls -a\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n.\n..\n.Rproj.user\n.git\n.github\n.gitignore\n.quarto\n_freeze\n_post_template.qmd\n_quarto.yml\n_site\ndata\nimages\nindex.qmd\njhustatprogramming2022.Rproj\nlectures.qmd\nposts\nprofile.jpg\nprojects\nprojects.qmd\nresources.qmd\nschedule.qmd\nstyles.css\nsyllabus.qmd\n```\n:::\n:::\n\n\nYes, we have lots of hidden files and folders in our course repository: `.git`, `.github`, `.gitignore`, `.quarto`, etc. \n\nThese are normal files — you can move them, rename them, or open them like any other — they are just hidden by default. \n\n\nNext, we can display file permissions, ownership, size & modification date\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls -la\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal 240\ndrwxr-xr-x  24 stephaniehicks  staff    768 Nov  1 12:39 .\ndrwxr-xr-x@ 13 stephaniehicks  staff    416 Oct 16 09:32 ..\ndrwxr-xr-x   4 stephaniehicks  staff    128 Aug  9 21:31 .Rproj.user\ndrwxr-xr-x  14 stephaniehicks  staff    448 Nov  1 00:07 .git\ndrwxr-xr-x   3 stephaniehicks  staff     96 Aug 11 21:04 .github\n-rw-r--r--   1 stephaniehicks  staff     58 Aug 11 21:03 .gitignore\ndrwxr-xr-x   8 stephaniehicks  staff    256 Nov  1 12:04 .quarto\ndrwxr-xr-x   7 stephaniehicks  staff    224 Oct 21 22:40 _freeze\n-rw-r--r--@  1 stephaniehicks  staff    976 Oct 17 11:43 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff    827 Oct 23 11:13 _quarto.yml\ndrwxr-xr-x  16 stephaniehicks  staff    512 Nov  1 12:39 _site\ndrwxr-xr-x   6 stephaniehicks  staff    192 Oct 26 23:55 data\ndrwxr-xr-x  13 stephaniehicks  staff    416 Oct 29 00:49 images\n-rw-r--r--   1 stephaniehicks  staff   2200 Oct 24 21:26 index.qmd\n-rw-r--r--   1 stephaniehicks  staff    205 Oct 31 22:15 jhustatprogramming2022.Rproj\n-rw-r--r--   1 stephaniehicks  staff    189 Aug 11 21:03 lectures.qmd\ndrwxr-xr-x  23 stephaniehicks  staff    736 Oct 20 21:01 posts\n-rw-r--r--   1 stephaniehicks  staff  60521 Aug 11 21:03 profile.jpg\ndrwxr-xr-x   6 stephaniehicks  staff    192 Oct 21 21:17 projects\n-rw-r--r--   1 stephaniehicks  staff    191 Oct 21 21:08 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff    501 Aug 11 21:03 resources.qmd\n-rw-r--r--   1 stephaniehicks  staff   3288 Oct 27 18:19 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff     17 Aug 11 21:03 styles.css\n-rw-r--r--   1 stephaniehicks  staff  18755 Oct 24 10:54 syllabus.qmd\n```\n:::\n:::\n\n\nDisplay size in human readable format\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls -lh\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal 232\ndrwxr-xr-x   7 stephaniehicks  staff   224B Oct 21 22:40 _freeze\n-rw-r--r--@  1 stephaniehicks  staff   976B Oct 17 11:43 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff   827B Oct 23 11:13 _quarto.yml\ndrwxr-xr-x  16 stephaniehicks  staff   512B Nov  1 12:39 _site\ndrwxr-xr-x   6 stephaniehicks  staff   192B Oct 26 23:55 data\ndrwxr-xr-x  13 stephaniehicks  staff   416B Oct 29 00:49 images\n-rw-r--r--   1 stephaniehicks  staff   2.1K Oct 24 21:26 index.qmd\n-rw-r--r--   1 stephaniehicks  staff   205B Oct 31 22:15 jhustatprogramming2022.Rproj\n-rw-r--r--   1 stephaniehicks  staff   189B Aug 11 21:03 lectures.qmd\ndrwxr-xr-x  23 stephaniehicks  staff   736B Oct 20 21:01 posts\n-rw-r--r--   1 stephaniehicks  staff    59K Aug 11 21:03 profile.jpg\ndrwxr-xr-x   6 stephaniehicks  staff   192B Oct 21 21:17 projects\n-rw-r--r--   1 stephaniehicks  staff   191B Oct 21 21:08 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff   501B Aug 11 21:03 resources.qmd\n-rw-r--r--   1 stephaniehicks  staff   3.2K Oct 27 18:19 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff    17B Aug 11 21:03 styles.css\n-rw-r--r--   1 stephaniehicks  staff    18K Oct 24 10:54 syllabus.qmd\n```\n:::\n:::\n\n\n\n### Wildcards\n\n**Wildcards** are the use of asterisk (`*`) to **allow any pattern to appear** in part of a filename. \n\nFor example, to list all the `.txt` files in a folder (but only the `.txt` files), you can type:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls *.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ncombined_names.txt\npackage_names.txt\nr_release.txt\nrelease_names.txt\n```\n:::\n:::\n\n\nOr if you wanted to see any file in the directory that has a \"r\" in it\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls *r*\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nindex.rmarkdown\nr_release.txt\nrelease_names.txt\n\nsecret_directory:\nteam_standings.csv\n\nsoccer_directory:\nteam_standings.csv\n```\n:::\n:::\n\n\nThis is an extremely powerful tool, and one you will likely use a lot. \n\n\n:::{.callout-note}\n\n### Question\n\nLet's try to write the command to pattern match all files that start with the pattern \"team\"\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n### try it out\n\n```\n:::\n\n\n\n:::\n\n# Create, copy, rename, delete files\n\nIn this section, we will explore commands for file management including:\n\n- create new file/change timestamps\n- copying files\n- renaming/moving files\n- deleting files\n- comparing files\n\n| Command\t| Description |  R commands |\n| ------- | ------------ | ---------- | \n| `touch` | Create empty file(s)/change timestamp | `file.create()` | \n| `cp`    |\tCopy files and folders | `file.copy()` |\n| `mv`    |\tRename/move file | `file.rename()` | \n| `rm`    |\tRemove/delete file | `file.remove()` | \n| `diff`  |\tCompare files | | \n\n## Create new file\n\n`touch` modifies file timestamps which is information associated with file modification. It can be any of the following:\n\n- access time (the last time the file was read)\n- modification time (the last time the contents of the file was changed)\n- change time (the last time the file’s metadata was changed)\n\nIf the **file does not exist**, it will create an empty file of the same name.\n\n:::{.callout-tip}\n\n### Example\n\nLet us use touch to create a new file `secret_analysis.R`.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntouch secret_analysis.R\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_analysis.R\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n:::\n\n\n## Copy files and folders\n\n`cp` makes copies of files and directories. \n\n:::{.callout-note}\n\nBy default, it will overwrite files without prompting for confirmation so be cautious while copying files or folders.\n\n:::\n\n\n:::{.callout-tip}\n\n### Example\n\nLet us create a copy of `team_standings.csv` file and name it as `team_standings_2.csv` in the same folder.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp team_standings.csv team_standings_2.csv\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_analysis.R\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_2.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n:::\n\nTo **copy folders**, you use the `-r` option which refers to `--recursive` i.e. copy directories recursively.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp -r secret_directory secret_directory_2\nls secret*\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nsecret_analysis.R\n\nsecret_directory:\nteam_standings.csv\n\nsecret_directory_2:\nteam_standings.csv\n```\n:::\n:::\n\n\n## Move and rename files\n\n`mv` moves and renames files and directories. Using different options, we can ensure\n\n- files are not overwritten\n- user is prompted for confirmation before overwriting files\n- details of files being moved is displayed\n\n\n| Command\t| Description | \n| ------- | ------------ | \n| `mv`    | Move or rename files/directories\n| `mv -f` | Do not prompt for confirmation before overwriting files\n| `mv -i` | Prompt for confirmation before overwriting files\n| `mv -n` | Do not overwrite existing files\n| `mv -v` | Move files in verbose mode\n\nLet us move/rename the `team_standings_2.csv` file to `team_standings_3.csv` in verbose mode. \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmv -v team_standings_2.csv team_standings_3.csv\nls team*\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nteam_standings_2.csv -> team_standings_3.csv\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\nWe see that there is no more file called `team_standings_2.csv` as it's now been renamed! \n\n\n## remove/delete files\n\nThe `rm` command is used to delete/remove files & folders. Using additional options, we can\n\n- remove directories & sub-directories\n- forcibly remove directories\n- interactively remove multiple files\n- display information about files removed/deleted\n\n| Command\t| Description | \n| ------- | ------------ | \n| `rm`    | Remove files/directories | \n| `rm -r`  | Recursively remove a directory & all its subdirectories | \n| `rm -rf`  | \tForcibly remove directory without prompting for confirmation or showing error messages | \n| `rm -i`  | Interactively remove multiple files, with a prompt before every removal | \n| `rm -v`  | Remove files in verbose mode, printing a message for each removed file | \n\nLet's remove the `secret_analysis.R` file that we created earlier with the `touch` command. \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrm secret_analysis.R\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsecret_directory_2\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\nTo remove a folder (and all of it's contents), we need to use recursive deletion with `-r`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrm -r secret_directory_2\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nanalysis.R\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n\n\n\n# Input and output\n\nIn this section, we will explore commands that will\n\n- display messages\n- print file contents\n- sort file contents\n- count length of file\n\n| Command\t| Description | \n| ------- | ------------ |\n| `echo`    | Display messages |\n| `cat`     | Print contents of a file |\n| `head`    | Prints first ten lines of a file by default |\n| `tail`    | Prints last ten lines of a file by default |\n| `more`    | Open a file for interactive reading, scrolling and searching |\n| `less`    | Open a file for interactive reading, scrolling and searching |\n| `sort`    | Sort a file in ascending order |\n| `wc`      | Count length (words or lines) in a file | \n\n## Display messages\n\nThe `echo` command **prints text** to the terminal. \n\nIt can be used for writing or appending messages to a file as well.\n\n| Command\t| Description |\n| ------- | ------------ |\n| `echo`        | Display messages | \n| `echo -n`     | Print message without trailing new line | \n| `echo > file` | Write message to a file | \n| `echo -e`     | Enable interpretation of special characters | \n\nLet us start with a simple example. We will print the text \"Funny-Looking Kid\" to the terminal. It is the release name for R version 4.2.1.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho Funny-looking Kid\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFunny-looking Kid\n```\n:::\n:::\n\n\nIf we wanted to redirect that output from printing to the terminal and write to a file, we use the redirection (`>`) operator.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho Funny-looking Kid > r_release.txt\ncat r_release.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFunny-looking Kid\n```\n:::\n:::\n\n\n:::{.callout-tip}\n\n### Redirection operator\n\nIf we want to redirect that output from printing to the terminal and write to a file, we use the `>` operator like so (`command > [file] `) where on the left side is output gets piped into a file on the right side. \n\n:::\n\n\n## The PATH variable\n\nAn important feature of the command line is the PATH variable. \n\nI won't get into all the details about the PATH variable, but having a basic understanding will likely prove useful if you ever have to troubleshoot problems in the future.\n\n- Have you ever wondered how the command-line knows what to do when you type a command like `python` or `ls`? \n- How does it know what program to run, especially on a computer that might have multiple installations of a program like Python?\n\nThe answer is that **your system has a list of folders stored in an “environment variable” called PATH**. \n\nWhen you run a command (like `python` or `ls`), it goes through those folders in order until it **finds an executable file with the name of the command you typed**. \n\nThen, when it finds that file, it executes that program and stops looking.\n\nYou can see the value of the PATH variable on your computer by typing \n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho $PATH\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n/opt/homebrew/Caskroom/miniforge/base/bin:/opt/homebrew/Caskroom/miniforge/base/condabin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/Users/stephaniehicks/Applications/quarto/bin:/usr/texbin:/Applications/RStudio.app/Contents/MacOS/quarto/bin:/Applications/RStudio.app/Contents/MacOS\n```\n:::\n:::\n\n\nThat means that when I type `python`, my computer will first look in the folder `/opt/homebrew/Caskroom/miniforge/base/bin` to see if there is a file named `python` it can run. If it can’t find one there, it moves on to to the next one. \n\n### Why is this useful\n\nIn a perfect world, you will never have to worry about your PATH variable, but there are a couple situations where **knowing about your PATH variable can be helpful**. In particular:\n\n1. If you **downloaded a program**, but you cannot run it from the command line, that probably means that its location is not in the PATH variable.\n2. If you find that when you type a command like `python`, the command line is not running the version of python you want it to run, that’s probably because a different version of python appears earlier in the PATH variable (since the command line will stop looking through these folders as soon as it finds a match). \n\n:::{.callout-note}\n\nYou can diagnose this problem by typing `which COMMANDNAME`, which will tell you the folder from which `COMMANDNAME` is being run.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhich python\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n/opt/homebrew/Caskroom/miniforge/base/bin/python\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhich ls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n/bin/ls\n```\n:::\n:::\n\n\n:::\n\n## Print file contents\n\nThe `cat` (stands for **cat**enate) command reads data from files, and outputs (or prints) their contents to the screen. \n\n:::{.callout-tip}\n\n### Example\n\nLet's consider the `release_names.txt` file, which contains release names of different R versions.\n\nIf we wanted to print the file contents to the screen: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat release_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nUnsuffered Consequences\nGreat Pumpkin\nDecember Snowflakes\nGift-Getting Season\nEaster Beagle\nRoasted Marshmallows\nTrick or Treat\nSecurity Blanket\nMasked Marvel\nGood Sport\nFrisbee Sailing\nWarm Puppy\nSpring Dance\nSock it to Me\nPumpkin Helmet\nSmooth Sidewalk\nFull of Ingredients\nWorld-Famous Astronaut\nFire Safety\nWooden Christmas Tree\nVery Secure Dishes\nVery, Very Secure Dishes\nSupposedly Educational\nBug in Your Hair\nSincere Pumpkin Patch\nAnother Canoe\nYou Stupid Darkness\nSingle Candle\nShort Summer\nKite Eating Tree\n```\n:::\n:::\n\n\n:::\n\n\nIf we wanted to **number all the output**, use the `-n` option: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat -n release_names.txt \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n     1\tUnsuffered Consequences\n     2\tGreat Pumpkin\n     3\tDecember Snowflakes\n     4\tGift-Getting Season\n     5\tEaster Beagle\n     6\tRoasted Marshmallows\n     7\tTrick or Treat\n     8\tSecurity Blanket\n     9\tMasked Marvel\n    10\tGood Sport\n    11\tFrisbee Sailing\n    12\tWarm Puppy\n    13\tSpring Dance\n    14\tSock it to Me\n    15\tPumpkin Helmet\n    16\tSmooth Sidewalk\n    17\tFull of Ingredients\n    18\tWorld-Famous Astronaut\n    19\tFire Safety\n    20\tWooden Christmas Tree\n    21\tVery Secure Dishes\n    22\tVery, Very Secure Dishes\n    23\tSupposedly Educational\n    24\tBug in Your Hair\n    25\tSincere Pumpkin Patch\n    26\tAnother Canoe\n    27\tYou Stupid Darkness\n    28\tSingle Candle\n    29\tShort Summer\n    30\tKite Eating Tree\n```\n:::\n:::\n\n\nTo concatenate several source (or input) files into one final target (or output) file, we can also use the redirect operator (`>`): \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat r_release.txt release_names.txt > combined_names.txt\ncat combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFunny-looking Kid\nUnsuffered Consequences\nGreat Pumpkin\nDecember Snowflakes\nGift-Getting Season\nEaster Beagle\nRoasted Marshmallows\nTrick or Treat\nSecurity Blanket\nMasked Marvel\nGood Sport\nFrisbee Sailing\nWarm Puppy\nSpring Dance\nSock it to Me\nPumpkin Helmet\nSmooth Sidewalk\nFull of Ingredients\nWorld-Famous Astronaut\nFire Safety\nWooden Christmas Tree\nVery Secure Dishes\nVery, Very Secure Dishes\nSupposedly Educational\nBug in Your Hair\nSincere Pumpkin Patch\nAnother Canoe\nYou Stupid Darkness\nSingle Candle\nShort Summer\nKite Eating Tree\n```\n:::\n:::\n\n\n- The `head` command will **display the first 10 lines** of a file(s) by default.\n- The `tail` command **displays the last 10 lines** of a file(s) by default.\n\nIt can be used to display the first (or last) few lines or bytes of a file as well.\n\n| Command\t| Description |\n| ------- | ------------ |\n| `head` | Output the first parts of a file | \n| `head -n num` | Output the first `num` lines of a file | \n| `head -c num` | Output the first `num` bytes of a file | \n| `tail` | Display the last part of a file | \n| `tail -n num` | Show the last `num` lines of a file | \n| `tail -n +num` | Show all contents of the file starting from `num` line | \n| `tail -c num` | Show last `num` bytes of a file | \n\nTo show the head of the first 8 lines of the `combined_names.txt` file: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -c 8 combined_names.txt \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFunny-lo\n```\n:::\n:::\n\n\nTo show all the lines starting from line 8 and beyond: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail -n +8 combined_names.txt \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nTrick or Treat\nSecurity Blanket\nMasked Marvel\nGood Sport\nFrisbee Sailing\nWarm Puppy\nSpring Dance\nSock it to Me\nPumpkin Helmet\nSmooth Sidewalk\nFull of Ingredients\nWorld-Famous Astronaut\nFire Safety\nWooden Christmas Tree\nVery Secure Dishes\nVery, Very Secure Dishes\nSupposedly Educational\nBug in Your Hair\nSincere Pumpkin Patch\nAnother Canoe\nYou Stupid Darkness\nSingle Candle\nShort Summer\nKite Eating Tree\n```\n:::\n:::\n\n\nThe `more` command displays text, one screen at a time. It opens a file for\n\n- interactive reading\n- scrolling\n- searching\n\n:::{.callout-tip}\n\nPress space to scroll down the page, the forward slash (`/`) for searching strings, `n` to go to the next match, and `q` to quit.\n\n:::\n\n| Command\t| Description |\n| ------- | ------------ |\n| `more`    | Open a file for interactive reading, scrolling and searching |\n| `space`   | Page down |\n| `/`       | Search for a string; press n to go the next match |\n| `q`       | Quit |\n\nThe `less` command is similar to more, but offers more features. \n\nIt **allows the user to scroll up and down the file**, go to the beginning and end of the file, forward and backward search and the ability to go the next and previous match while searching the file.\n\n| Command\t| Description |\n| ------- | ------------ |\n| `less\t`   | Open a file for interactive reading, scrolling and searching | \n| `space`   | Page down | \n| `b`   | Page up | \n| `G`   | Go to the end of file | \n| `g`   | Go to the start of file | \n| `/`   | Forward search | \n| `?`   | Backward search | \n| `n`   | Go to next match | \n| `N`   | Go to previous match | \n| `q`   | Quit | \n\n\n## Sort files\n\nThe `sort` command will **sort the contents of text file**, line by line. Using additional options, we can\n\n- sort a file in ascending/descending order\n- ignore case while sorting\n- use numeric order for sorting\n- preserve only unique lines while sorting\n\n:::{.callout-tip}\n\nUsing the `sort` command, the contents can be **sorted numerically and alphabetically**. By default, the rules for sorting are:\n\n- lines starting with a number will appear before lines starting with a letter.\n- lines starting with a letter that appears earlier in the alphabet will appear before lines starting with a letter that appears later in the alphabet.\n- lines starting with a lowercase letter will appear before lines starting with the same letter in uppercase.\n\n:::\n\nUsing additional options, the rules for sorting can be changed. We list the options in the below table.\n\n| Command\t| Description |\n| ------- | ------------ |\n| `sort` | Sort lines of text files\n| `sort -r` | Sort a file in descending order\n| `sort --ignore-case` | Ignore case while sorting\n| `sort -n` | Use numeric order for sorting\n| `sort -u` | Preserve only unique lines while sorting\n\nHere we are sorting in a descending alphabetical order of the `combined_names.txt`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsort -r combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nYou Stupid Darkness\nWorld-Famous Astronaut\nWooden Christmas Tree\nWarm Puppy\nVery, Very Secure Dishes\nVery Secure Dishes\nUnsuffered Consequences\nTrick or Treat\nSupposedly Educational\nSpring Dance\nSock it to Me\nSmooth Sidewalk\nSingle Candle\nSincere Pumpkin Patch\nShort Summer\nSecurity Blanket\nRoasted Marshmallows\nPumpkin Helmet\nMasked Marvel\nKite Eating Tree\nGreat Pumpkin\nGood Sport\nGift-Getting Season\nFunny-looking Kid\nFull of Ingredients\nFrisbee Sailing\nFire Safety\nEaster Beagle\nDecember Snowflakes\nBug in Your Hair\nAnother Canoe\n```\n:::\n:::\n\n\n\n## Count length of file\n\n`wc` (word count) will **print newline, word, and byte counts** for file(s). \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n      31      75     564 combined_names.txt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n      31 combined_names.txt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -w combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n      75 combined_names.txt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -c combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n     564 combined_names.txt\n```\n:::\n:::\n\n\n\nIf more than one file is specified, it will also print total line.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc combined_names.txt package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n      31      75     564 combined_names.txt\n     108     216    1498 package_names.txt\n     139     291    2062 total\n```\n:::\n:::\n\n\n\n\n# Search and regular expression \n\nIn this section, we will explore commands that will\n\n- search for a given string in a file\n- find files using names\n- search for binary executable files\n\n\n| Command\t| Description | \n| ------- | ------------ |\n| `grep` | Search for a given string in a file | \n| `find` | Find files using filenames | \n| `which` | Search for binary executable files | \n\n\n## Search for a string in a file\n\nThe `grep` command is used for **pattern matching**. Along with additional options, it can be used to\n\n- match pattern in input text\n- ignore case\n- search recursively for an exact string\n- print filename and line number for each match\n- invert match for excluding specific strings\n\n`grep` (stands for **g**lobal **r**egular **e**x**p**ression) **processes text line by line**, and prints any lines which match a specified pattern. \n\nIt is a powerful tool for matching a regular expression against text in a file, multiple files, or a stream of input.\n\n| Command\t| Description | \n| ------- | ------------ |\n| `grep` | Matches pattern in input text\n| `grep -i` | Ignore case\n| `grep -RI` | Search recursively for an exact string\n| `grep -E` | Use extended regular expression\n| `grep -Hn` | Print file name & corresponding line number for each match\n| `grep -v` | Invert match for excluding specific strings\n\nFirst, we will search for packages that include the letter \"R\" in a list of R package names (`package_names.txt`). \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep R package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n14. RJDBC\n30. logNormReg\n27. gLRTH\n35. fermicatsR\n42. OptimaRegion\n61. PropScrRand\n25. RPyGeo\n47. SMARTp\n24. SCRT\n56. MARSS\n85. edfReader\n32. SPEDInstabR\n98. SmallCountRounding\n```\n:::\n:::\n\n\nIf you are familiar with regular expressions, you can do cool things like search for a \"r\" followed by a white space with the `\\s` character set for white spaces. \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep -i 'r\\s' release_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nDecember Snowflakes\nEaster Beagle\nTrick or Treat\nBug in Your Hair\nAnother Canoe\nShort Summer\n```\n:::\n:::\n\n\nIf there is more than one file to search, use the `-H` option to print the filename for each match.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep -H F r_release.txt package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nr_release.txt:Funny-looking Kid\npackage_names.txt:69. FField\npackage_names.txt:78. sybilccFBA\n```\n:::\n:::\n\n\nAnd here is the file name and line number\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep -Hn F r_release.txt package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nr_release.txt:1:Funny-looking Kid\npackage_names.txt:82:69. FField\npackage_names.txt:93:78. sybilccFBA\n```\n:::\n:::\n\n\nAnd here we invert match for excluding the string \"R\"\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep -vi R r_release.txt package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nr_release.txt:Funny-looking Kid\npackage_names.txt:36. mlflow\npackage_names.txt:10. aweek\npackage_names.txt:31. BIGDAWG\npackage_names.txt:22. vqtl\npackage_names.txt:29. sspline\npackage_names.txt:39. mev\npackage_names.txt:66. SuppDists\npackage_names.txt:15. MIAmaxent\npackage_names.txt:31. BIGDAWG\npackage_names.txt:29. sspline\npackage_names.txt:60. Eagle\npackage_names.txt:83. WPKDE\npackage_names.txt:11. hdnom\npackage_names.txt:26. blink\npackage_names.txt:18. gazepath\npackage_names.txt:52. ClimMobTools\npackage_names.txt:44. expstudies\npackage_names.txt:65. mined\npackage_names.txt:81. mgcViz\npackage_names.txt:45. solitude\npackage_names.txt:9. pAnalysis\npackage_names.txt:65. mined\npackage_names.txt:94. ICAOD\npackage_names.txt:48. geoknife\npackage_names.txt:45. solitude\npackage_names.txt:67. tictactoe\npackage_names.txt:46. cbsem\npackage_names.txt:93. PathSelectMP\npackage_names.txt:96. poisbinom\npackage_names.txt:17. ASIP\npackage_names.txt:5. pls\npackage_names.txt:84. BIOMASS\npackage_names.txt:59. AdMit\npackage_names.txt:77. SetMethods\npackage_names.txt:53. MVB\npackage_names.txt:2. odk\npackage_names.txt:86. mongolite\npackage_names.txt:4. TIMP\npackage_names.txt:97. AnalyzeTS\npackage_names.txt:87. WGScan\npackage_names.txt:63. dagitty\npackage_names.txt:69. FField\npackage_names.txt:13. MaXact\npackage_names.txt:73. VineCopula\npackage_names.txt:7. bayesbio\npackage_names.txt:34. ibd\npackage_names.txt:8. MVTests\npackage_names.txt:19. mcmcabn\npackage_names.txt:43. accept\npackage_names.txt:78. sybilccFBA\npackage_names.txt:62. lue\npackage_names.txt:100. addhaz\npackage_names.txt:37. CombinePValue\npackage_names.txt:1. cyclocomp\npackage_names.txt:54. OxyBS\n```\n:::\n:::\n\n\n# System info \n\nIn this section, we will explore commands that will allow us to\n\n- display information about the system\n- display file system disk space usage\n- exit the terminal\n- run commands a superuser\n- shutdown the system\n\n| Command\t| Description | \n| ------- | ------------ |\n| `uname` | Display important information about the system\n| `df` | Display file system disk space usage |\n| `exit` | Exit the terminal |\n| `sudo` | Run command as super user |\n| `shutdown` | Shutdown the system | \n\n\nFor example, we can display the file system disk usage \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndf\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFilesystem     512-blocks      Used  Available Capacity iused       ifree %iused  Mounted on\n/dev/disk3s1s1 3896910480  17251896 3307197344     1%  348619  4292631783    0%   /\ndevfs                 396       396          0   100%     686           0  100%   /dev\n/dev/disk3s6   3896910480        40 3307197344     1%       0 16535986720    0%   /System/Volumes/VM\n/dev/disk3s2   3896910480   9170792 3307197344     1%    1010 16535986720    0%   /System/Volumes/Preboot\n/dev/disk3s4   3896910480     22024 3307197344     1%      45 16535986720    0%   /System/Volumes/Update\n/dev/disk1s2      1024000     12328     985144     2%       1     4925720    0%   /System/Volumes/xarts\n/dev/disk1s1      1024000     12504     985144     2%      27     4925720    0%   /System/Volumes/iSCPreboot\n/dev/disk1s3      1024000      4304     985144     1%      52     4925720    0%   /System/Volumes/Hardware\n/dev/disk3s5   3896910480 561189600 3307197344    15% 1586425 16535986720    0%   /System/Volumes/Data\nmap auto_home           0         0          0   100%       0           0  100%   /System/Volumes/Data/home\n```\n:::\n:::\n\n# R in the shell\n\nIn this section, we will learn to execute R commands and scripts in the command line using:\n\n- `R -e`\n- `Rscript -e`\n- `R CMD BATCH`\n\nThe `-e` option allows us to specify R expression(s). \n\n`R -e` will launch R and then execute the code specified within quotes. \n\n- Use semi-colon to execute multiple expressions as shown below. \n- You will be able to run the below commands only if you are able to launch R from the command line. (**Demo this**).\n- Windows users need to ensure that R is added to the path environment.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nR -e \"head(mtcars); tail(mtcars)\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n\nR version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\nCopyright (C) 2022 The R Foundation for Statistical Computing\nPlatform: aarch64-apple-darwin21.6.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Previously saved workspace restored]\n\n> head(mtcars); tail(mtcars)\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n> \n> \n```\n:::\n:::\n\n\n`Rscript -e` will run code without launching R.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript -e \"head(mtcars); tail(mtcars)\"\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n                mpg cyl  disp  hp drat    wt qsec vs am gear carb\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n```\n:::\n:::\n\n\nWe can use `Rscript` to execute a R script as well. In the below example, we execute the code in `analysis.R` file (which just asks to print the head of `mtcars`).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat analysis.R\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nhead(mtcars)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript analysis.R\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n:::\n\n\n# Post-lecture materials\n\n### Summary \n\n- Shell is a text based application for viewing, handling and manipulating files\n- It is also known by the following names\n    - CLI (Command Line Interface)\n    - Terminal\n    - Bash (Bourne Again Shell)\n- Use `Rscript -e` or `R -e` to execute R scripts from the command line\n- RStudio includes a Terminal (from version 1.1.383)\n- Execute commands from shell script in RStudio using Ctrl + Enter\n- RMarkdown and Quarto supports bash, sh and awk\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1. Explore the help files of `tar` and `gzip` commands for compressing files.\n2. Move around the computer, get used to moving in and out of directories, see how different file types appear in the Unix shell. Be sure to use the `pwd` and `cd` commands, and the different flags for the `ls` commands. \n3. Practice using \"Tab for Auto-complete\" in the shell to autocomplete commands or file names.\n4. Practice your command line knowledge with [Command Challenge](https://cmdchallenge.com/).\n:::\n\n### Additional Resources\n\n::: callout-tip\n\n- [R Squared Academy](https://blog.rsquaredacademy.com/command-line-basics-for-r-users)\n- [Software Carpentry: The Unix Shell](https://swcarpentry.github.io/shell-novice)\n- [Data Science at the Command line](https://datascienceatthecommandline.com/2e)\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}