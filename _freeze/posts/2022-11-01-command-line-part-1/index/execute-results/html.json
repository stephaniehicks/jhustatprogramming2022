{
  "hash": "3ca8ba26e24e853a0bbbac5e92a9733e",
  "result": {
    "markdown": "---\ntitle: \"Data science at the command-line (Part 1)\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Introduction to the command-line for data analysis (part 1)\"\ndate: 2022-11-01\ndraft: true\ncategories: [module 1, week 2, command-line]\neditor_options: \n  chunk_output_type: inline\n---\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  Add here.\n2.  Add here.\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- [R Squared Academy](https://blog.rsquaredacademy.com/command-line-basics-for-r-users)\n- [Software Carpentry: The Unix Shell](https://swcarpentry.github.io/shell-novice)\n\n# Learning objectives\n\n::: callout-note\n### Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Understand what is a command shell and why would use one.\n-   Explain how the shell relates to the keyboard, the screen, the operating system, and users' programs.\n-   Explain when and why command-line interfaces should be used instead of graphical interfaces.\n:::\n\n# Introduction\n\nWe we use interact with computers, we often do so with a keyboard and mouse, touch screen interfaces, or using speech recognition systems.\n\nThe most widely used way to interact with personal computers is called a **graphical user interface** (GUI). With a GUI, we give instructions by clicking a mouse and using menu-driven interactions.\n\nThe problem with only working with GUIs is that while the visual aid of a GUI makes it intuitive to learn, this way of delivering instructions to a computer scales very poorly.\n\n::: callout-note\n### Example\n\nImagine the following task: for a literature search, you have to\n\n1.  Copy the third line of one thousand text files in one thousand different directories\n2.  Paste the lines into a single file.\n\nUsing a GUI, you would not only be clicking at your desk for several hours, but you could potentially also commit an error in the process of completing this repetitive task.\n:::\n\nThis is where we take advantage of the **Unix shell**.\n\nThe Unix shell is both\n\n1.  A **command-line interface** (CLI)\n2.  A **scripting language**\n\nThis allows such repetitive tasks to be done automatically and fast. Using the shell, the task in the literature example can be accomplished in seconds.\n\n## The Shell\n\nThe **shell is a program** (or environment) where users can **type commands** and the commands can be executed. Another way of thinking about it is, a shell provides an **interface between the user and the UNIX system**.\n\n::: callout-note\n### Types of shells\n\n-   **Bash** (Bourne Again SHell). The most popular Unix shell is Bash (the Bourne Again SHell --- so-called because it's derived from a shell written by Stephen Bourne). Bash is the default shell on most modern implementations of Unix and in most packages that provide Unix-like tools for Windows.\n-   **Zsh** (Z SHell). Zsh is built on top of bash with some additional features including providing the user with more flexibility by providing various features such as plug-in support, better customization, theme support, spelling correction, etc. Zsh is the default shell for macOS and Kali Linux.\n:::\n\nThe **grammar of a shell** allows you to combine existing tools into powerful pipelines and handle large volumes of data automatically. Sequences of commands can be written into a script, improving the reproducibility of workflows.\n\nIn addition, the command line is often the easiest way to interact with remote machines and supercomputers.\n\n-   Familiarity with the shell is near essential to run a variety of specialized tools and resources including high-performance computing systems.\n-   As clusters and cloud computing systems become more popular for scientific data crunching, being able to interact with the shell is becoming a necessary skill.\n\nLet's get started.\n\n## Opening the shell\n\nWhen the shell is first opened, you are presented with a prompt, indicating that the shell is waiting for input.\n\n``` {.bash filename=\"Bash\"}\n$\n```\n\nThe shell typically uses `$` as the prompt, but may use a different symbol (for the purposes of the rest of the lecture, I will omit the `$`).\n\n::: callout-important\n1.  When typing commands in the shell, **do not type the `$`**, only the commands that follow it.\n2.  After you type a command, you have to **press the Enter key** to execute it.\n:::\n\nThe prompt is followed by a text cursor, a character that indicates the position where your typing will appear.\n\n## Shell basics \n\nSo let's try our first command, `ls` which is short for listing files. With R, we know how to do this with `list.files()` function in base R: \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlist.files()\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"combined_names.txt\"   \"index.qmd\"            \"index.rmarkdown\"     \n [4] \"package_names.txt\"    \"r_release.txt\"        \"release_names.txt\"   \n [7] \"secret_directory\"     \"soccer_directory\"     \"team_standings_3.csv\"\n[10] \"team_standings.csv\"  \n```\n:::\n:::\n\n\nThis command will list the contents of the current directory where the lecture is located. In RStudio, we can write a bash code block like this: \n\n```{{bash}}\nls\n```\n\nand the executed code block is this: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n:::{.callout-note}\n\nIf the shell can't find a program whose name is the command you typed, it will print an error message such as:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nks\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nError in running command bash\n```\n:::\n:::\n\n\nThis might happen if the command was mis-typed or if the program corresponding to that command is not installed.\n:::\n\n\nNext, lets learn to display\n\n- basic information about the user\n- the current date & time\n- the calendar\n- and clear the screen\n\n| Command\t| Description | R command | \n| ------- | ------------| --------- |   \n| `whoami`        |     Who is the user? | `Sys.info()` / `whoami::whoami()` | \n| `date`\t        |     Get date, time and timezone | `Sys.time()` |\n| `cal`           |     Display calendar | \n| `clear`         |     Clear the screen | Ctrl + L\n\n`whoami` prints the effective user id i.e. the name of the user who runs the command. Use it to verify the user as which you are logged into the system.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwhoami\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nstephaniehicks\n```\n:::\n:::\n\n\n`date` will display or change the value of the system’s time and date information.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndate\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nWed Oct 26 14:49:11 EDT 2022\n```\n:::\n:::\n\n\n`cal` will display a formatted calendar and clear will clear all text on the screen and display a new prompt. You can clear the screen by pressing Ctrl + L as well.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncal\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n    October 2022      \nSu Mo Tu We Th Fr Sa  \n                   1  \n 2  3  4  5  6  7  8  \n 9 10 11 12 13 14 15  \n16 17 18 19 20 21 22  \n23 24 25 _\b2_\b6 27 28 29  \n30 31                 \n```\n:::\n:::\n\nTo clear the R console, we use Ctrl + L.\n\n## Getting help\n\nBefore we proceed further, let us learn to view the documentation/manual pages of the commands.\n\n| Command\t| Description |  \n| ------- | ------------| \n| `man`   | Display manual pages for a command | \n| `whatis` | Single line description of a command | \n\n`man` is used to view the system’s reference manual.\n\n``` {.bash}\nman date \n```\n\n``` {.md} \nDATE(1)                          General Commands Manual                          DATE(1)\n\nNAME\n     date – display or set date and time\n\nSYNOPSIS\n     date [-jnRu] [-r seconds | filename] [-v [+|-]val[ymwdHMS]] ... [+output_fmt]\n     date [-ju] [[[mm]dd]HH]MM[[cc]yy][.ss]\n     date [-jRu] -f input_fmt new_date [+output_fmt]\n     date [-jnu] [-I[FMT]] [-f input_fmt] [-r ...] [-v ...] [new_date]\n\nDESCRIPTION\n     When invoked without arguments, the date utility displays the current date and time.\n```\n\n\n\n# Move around files\n\n## Navigate the file system\n\nNext, we will introduce commands that help us:\n\n- navigate between different folders/directories\n- return current working directory\n- list all the files & folders in a directory\n- create and delete directories\n\n\n| Command\t| Description | R commands | \n| ------- | ------------| --------- |   \n| `pwd`   | Print working directory | `here::here()` | \n| `ls`    | List directory contents | `dir()` / `list.files()` / `list.dirs()` |\n| `cd`    |\tChange current working directory | `setwd()` | \n| `mkdir`\t| Create directory | `dir.create()` | \n| `rmdir`\t| Remove/delete directory | \n\n\n`pwd` displays the name of the present working directory.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npwd\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n/Users/stephaniehicks/Documents/github/teaching/jhustatprogramming2022/posts/2022-11-01-command-line-part-1\n```\n:::\n:::\n\n\n`ls` displays information about files and directories in the current directory along with their associated metadata such as\n\n- size\n- ownership\n- modification date\n\n\nWith no options, it will list the files and directories in the current directory, sorted alphabetically.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n`cd` (change directory) changes the current working directory. It is among the most used commands as it allows the user to move around the file system.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd .. \nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n2022-10-27-build-website\n2022-11-01-command-line-part-1\n2022-11-03-command-line-part-2\n2022-11-08-version-control-part-1\n2022-11-10-version-control-part-2\n2022-11-15-object-oriented-programming\n2022-11-17-r-pkg-dev-part-1\n2022-11-22-r-pkg-dev-part-2\n2022-11-29-purrr-fun-programming\n2022-12-01-pkgdown-pkg-website\n2022-12-01-targets-proj-workflows\n2022-12-06-ggplot2-adv\n2022-12-08-r2d3-data-viz\n2022-12-13-flexdashboard\n2022-12-15-shinydashboard\n2022-12-20-dealing-with-large-data\n2022-12-20-parallel-computing\n2022-12-20-profiling-r-code\n2022-12-22-interacting-with-apis\n2022-12-22-relational-databases\n_metadata.yml\n```\n:::\n:::\n\n\n:::{.callout-note}\n\nThe `cd ..`\tmeans to change to the directory that is one level up. \n\n:::\n\n`mkdir` will create new directory. It will allow you to set file mode (permissions associated with the directory) i.e. who can open/modify/delete the directory.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir secret_directory\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nmkdir: secret_directory: File exists\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n`rmdir` will remove empty directories from the file system. It can be used to remove multiple empty directories as well. If the directory is not empty, rmdir will not remove it and instead display a warning that the directory is not empty.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrmdir secret_directory\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nrmdir: secret_directory: Directory not empty\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n## Change working directory\n\nLet us focus a bit more on changing working directory. The below table shows commands for changing working directory to\n\n- up one level\n- previous working directory\n- home directory\n- and root directory\n\n| Command\t| Description |  \n| ------- | ------------| \n| `cd .`    |\tNavigate into directory |\n| `cd ..`    |\tGo up one level | \n| `cd -`    |\tGo to previous working directory | \n| `cd ~`    |\tChange directory to home directory | \n| `cd /`    |\tChange directory to root directory | \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ..\nls \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n2022-10-27-build-website\n2022-11-01-command-line-part-1\n2022-11-03-command-line-part-2\n2022-11-08-version-control-part-1\n2022-11-10-version-control-part-2\n2022-11-15-object-oriented-programming\n2022-11-17-r-pkg-dev-part-1\n2022-11-22-r-pkg-dev-part-2\n2022-11-29-purrr-fun-programming\n2022-12-01-pkgdown-pkg-website\n2022-12-01-targets-proj-workflows\n2022-12-06-ggplot2-adv\n2022-12-08-r2d3-data-viz\n2022-12-13-flexdashboard\n2022-12-15-shinydashboard\n2022-12-20-dealing-with-large-data\n2022-12-20-parallel-computing\n2022-12-20-profiling-r-code\n2022-12-22-interacting-with-apis\n2022-12-22-relational-databases\n_metadata.yml\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n_freeze\n_post_template.qmd\n_quarto.yml\n_site\nimages\nindex.qmd\njhustatprogramming2022.Rproj\nlectures.qmd\nposts\nprofile.jpg\nprojects\nprojects.qmd\nresources.qmd\nschedule.qmd\nstyles.css\nsyllabus.qmd\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ~ \nls \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nApplications\nCreative Cloud Files\nDesktop\nDocuments\nDownloads\nDropbox\nLibrary\nMovies\nMusic\nPictures\nPublic\nminiforge3\n```\n:::\n:::\n\n\n\n\n## List directory contents\n\n`ls` will list the contents of a directory. Using different arguments, we can\n\n- list hidden files\n- view file permissions, ownership, size & modification date\n- sort by size & modification date\n\n| Command\t| Description |  \n| ------- | ------------| \n| `ls` | List directory contents | \n| `ls -l` | List files one per line | \n| `ls -a` | List all files including hidden files | \n| `ls -la` | Display file permissions, ownership, size & modification date | \n| `ls -lh` | Long format list with size displayed in human readable format | \n| `ls -lS` | Long format list sorted by size | \n| `ls -ltr` | Long format list sorted by modification date | \n\nList files one per line\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls -l\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal 232\ndrwxr-xr-x   7 stephaniehicks  staff    224 Oct 21 22:40 _freeze\n-rw-r--r--@  1 stephaniehicks  staff    976 Oct 17 11:43 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff    827 Oct 23 11:13 _quarto.yml\ndrwxr-xr-x  16 stephaniehicks  staff    512 Oct 26 14:46 _site\ndrwxr-xr-x  13 stephaniehicks  staff    416 Oct 24 21:25 images\n-rw-r--r--   1 stephaniehicks  staff   2200 Oct 24 21:26 index.qmd\n-rw-r--r--   1 stephaniehicks  staff    205 Oct 23 11:02 jhustatprogramming2022.Rproj\n-rw-r--r--   1 stephaniehicks  staff    189 Aug 11 21:03 lectures.qmd\ndrwxr-xr-x  23 stephaniehicks  staff    736 Oct 20 21:01 posts\n-rw-r--r--   1 stephaniehicks  staff  60521 Aug 11 21:03 profile.jpg\ndrwxr-xr-x   6 stephaniehicks  staff    192 Oct 21 21:17 projects\n-rw-r--r--   1 stephaniehicks  staff    191 Oct 21 21:08 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff    501 Aug 11 21:03 resources.qmd\n-rw-r--r--   1 stephaniehicks  staff   2931 Oct 22 21:23 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff     17 Aug 11 21:03 styles.css\n-rw-r--r--   1 stephaniehicks  staff  18755 Oct 24 10:54 syllabus.qmd\n```\n:::\n:::\n\n\nList all files including hidden files\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls -a\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n.\n..\n.Rproj.user\n.git\n.github\n.gitignore\n.quarto\n_freeze\n_post_template.qmd\n_quarto.yml\n_site\nimages\nindex.qmd\njhustatprogramming2022.Rproj\nlectures.qmd\nposts\nprofile.jpg\nprojects\nprojects.qmd\nresources.qmd\nschedule.qmd\nstyles.css\nsyllabus.qmd\n```\n:::\n:::\n\n\n\nDisplay file permissions, ownership, size & modification date\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls -la\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal 240\ndrwxr-xr-x  23 stephaniehicks  staff    736 Oct 26 14:46 .\ndrwxr-xr-x@ 13 stephaniehicks  staff    416 Oct 16 09:32 ..\ndrwxr-xr-x   4 stephaniehicks  staff    128 Aug  9 21:31 .Rproj.user\ndrwxr-xr-x  14 stephaniehicks  staff    448 Oct 26 14:49 .git\ndrwxr-xr-x   3 stephaniehicks  staff     96 Aug 11 21:04 .github\n-rw-r--r--   1 stephaniehicks  staff     58 Aug 11 21:03 .gitignore\ndrwxr-xr-x   8 stephaniehicks  staff    256 Oct 26 12:42 .quarto\ndrwxr-xr-x   7 stephaniehicks  staff    224 Oct 21 22:40 _freeze\n-rw-r--r--@  1 stephaniehicks  staff    976 Oct 17 11:43 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff    827 Oct 23 11:13 _quarto.yml\ndrwxr-xr-x  16 stephaniehicks  staff    512 Oct 26 14:46 _site\ndrwxr-xr-x  13 stephaniehicks  staff    416 Oct 24 21:25 images\n-rw-r--r--   1 stephaniehicks  staff   2200 Oct 24 21:26 index.qmd\n-rw-r--r--   1 stephaniehicks  staff    205 Oct 23 11:02 jhustatprogramming2022.Rproj\n-rw-r--r--   1 stephaniehicks  staff    189 Aug 11 21:03 lectures.qmd\ndrwxr-xr-x  23 stephaniehicks  staff    736 Oct 20 21:01 posts\n-rw-r--r--   1 stephaniehicks  staff  60521 Aug 11 21:03 profile.jpg\ndrwxr-xr-x   6 stephaniehicks  staff    192 Oct 21 21:17 projects\n-rw-r--r--   1 stephaniehicks  staff    191 Oct 21 21:08 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff    501 Aug 11 21:03 resources.qmd\n-rw-r--r--   1 stephaniehicks  staff   2931 Oct 22 21:23 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff     17 Aug 11 21:03 styles.css\n-rw-r--r--   1 stephaniehicks  staff  18755 Oct 24 10:54 syllabus.qmd\n```\n:::\n:::\n\n\nDisplay size in human readable format\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls -lh\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal 232\ndrwxr-xr-x   7 stephaniehicks  staff   224B Oct 21 22:40 _freeze\n-rw-r--r--@  1 stephaniehicks  staff   976B Oct 17 11:43 _post_template.qmd\n-rw-r--r--   1 stephaniehicks  staff   827B Oct 23 11:13 _quarto.yml\ndrwxr-xr-x  16 stephaniehicks  staff   512B Oct 26 14:46 _site\ndrwxr-xr-x  13 stephaniehicks  staff   416B Oct 24 21:25 images\n-rw-r--r--   1 stephaniehicks  staff   2.1K Oct 24 21:26 index.qmd\n-rw-r--r--   1 stephaniehicks  staff   205B Oct 23 11:02 jhustatprogramming2022.Rproj\n-rw-r--r--   1 stephaniehicks  staff   189B Aug 11 21:03 lectures.qmd\ndrwxr-xr-x  23 stephaniehicks  staff   736B Oct 20 21:01 posts\n-rw-r--r--   1 stephaniehicks  staff    59K Aug 11 21:03 profile.jpg\ndrwxr-xr-x   6 stephaniehicks  staff   192B Oct 21 21:17 projects\n-rw-r--r--   1 stephaniehicks  staff   191B Oct 21 21:08 projects.qmd\n-rw-r--r--   1 stephaniehicks  staff   501B Aug 11 21:03 resources.qmd\n-rw-r--r--   1 stephaniehicks  staff   2.9K Oct 22 21:23 schedule.qmd\n-rw-r--r--   1 stephaniehicks  staff    17B Aug 11 21:03 styles.css\n-rw-r--r--   1 stephaniehicks  staff    18K Oct 24 10:54 syllabus.qmd\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd ../..\nls \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n_freeze\n_post_template.qmd\n_quarto.yml\n_site\nimages\nindex.qmd\njhustatprogramming2022.Rproj\nlectures.qmd\nposts\nprofile.jpg\nprojects\nprojects.qmd\nresources.qmd\nschedule.qmd\nstyles.css\nsyllabus.qmd\n```\n:::\n:::\n\n\n\n\n# Create, copy, rename, delete files\n\nIn this section, we will explore commands for file management including:\n\n- create new file/change timestamps\n- copying files\n- renaming/moving files\n- deleting files\n- comparing files\n\n| Command\t| Description |  R commands |\n| ------- | ------------ | ---------- | \n| `touch` | Create empty file(s)/change timestamp | `file.create()` | \n| `cp`    |\tCopy files & folders | `file.copy()` |\n| `mv`    |\tRename/move file | `file.rename()` | \n| `rm`    |\tRemove/delete file | `file.remove()` | \n| `diff`  |\tCompare files | | \n\n## Create new file\n\n`touch` modifies file timestamps which is information associated with file modification. It can be any of the following:\n\n- access time (the last time the file was read)\n- modification time (the last time the contents of the file was changed)\n- change time (the last time the file’s metadata was changed)\n\nIf the file does not exist, it will create an empty file of the same name. Let us use touch to create a new file myanalysis.R.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntouch secret_analysis.R\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_analysis.R\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n## Copy files and folders\n\n`cp` makes copies of files and directories. \n\n:::{.callout-note}\n\nBy default, it will overwrite files without prompting for confirmation so be cautious while copying files or folders.\n\n:::\n\nLet us create a copy of `team_standings.csv` file and name it as `team_standings_2.csv` in the same folder.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp team_standings.csv team_standings_2.csv\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_analysis.R\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_2.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n\nTo copy folders, you use the `-r` option which refers to `--recursive` i.e. copy directories recursively.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncp -r secret_directory secret_directory_2\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_analysis.R\nsecret_directory\nsecret_directory_2\nsoccer_directory\nteam_standings.csv\nteam_standings_2.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n## move and rename files\n\n`mv` moves and renames files and directories. Using different options, we can ensure\n\n- files are not overwritten\n- user is prompted for confirmation before overwriting files\n- details of files being moved is displayed\n\n\n| Command\t| Description | \n| ------- | ------------ | \n| `mv`    | Move or rename files/directories\n| `mv -f` | Do not prompt for confirmation before overwriting files\n| `mv -i` | Prompt for confirmation before overwriting files\n| `mv -n` | Do not overwrite existing files\n| `mv -v` | Move files in verbose mode\n\nLet us move/rename the `team_standings_2.csv` file to `team_standings_3.csv` in verbose mode. \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmv -v team_standings_2.csv team_standings_3.csv\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nteam_standings_2.csv -> team_standings_3.csv\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_analysis.R\nsecret_directory\nsecret_directory_2\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\nWe see that there is no more file called `team_standings_2.csv` as it's now been renamed! \n\n:::{.callout-tip}\n\nWe will look into the `cat` command in more detail later, but for the time being it is sufficient to know that it prints contents of a file. \n\nThe file contains release names of different R versions.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat team_standings.csv\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n\"Standing\",\"Team\"\n1,\"Spain\"\n2,\"Netherlands\"\n3,\"Germany\"\n4,\"Uruguay\"\n5,\"Argentina\"\n6,\"Brazil\"\n7,\"Ghana\"\n8,\"Paraguay\"\n9,\"Japan\"\n10,\"Chile\"\n11,\"Portugal\"\n12,\"USA\"\n13,\"England\"\n14,\"Mexico\"\n15,\"South Korea\"\n16,\"Slovakia\"\n17,\"Ivory Coast\"\n18,\"Slovenia\"\n19,\"Switzerland\"\n20,\"South Africa\"\n21,\"Australia\"\n22,\"New Zealand\"\n23,\"Serbia\"\n24,\"Denmark\"\n25,\"Greece\"\n26,\"Italy\"\n27,\"Nigeria\"\n28,\"Algeria\"\n29,\"France\"\n30,\"Honduras\"\n31,\"Cameroon\"\n32,\"North Korea\"\n```\n:::\n:::\n\n:::\n\n\n## remove/delete files\n\nThe `rm` command is used to delete/remove files & folders. Using additional options, we can\n\n- remove directories & sub-directories\n- forcibly remove directories\n- interactively remove multiple files\n- display information about files removed/deleted\n\n| Command\t| Description | \n| ------- | ------------ | \n| `rm`    | Remove files/directories | \n| `rm -r  | Recursively remove a directory & all its subdirectories | \n| `rm -rf  | \tForcibly remove directory without prompting for confirmation or showing error messages | \n| `rm -i  | Interactively remove multiple files, with a prompt before every removal | \n| `rm -v  | Remove files in verbose mode, printing a message for each removed file | \n\nLet's remove the `secret_analysis.R` file that we created earlier with the `touch` command. \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrm secret_analysis.R\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsecret_directory_2\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\nTo remove a folder (and all of it's contents), we need to use recursive deletion with `-r`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrm -r secret_directory_2\nls\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\ncombined_names.txt\nindex.qmd\nindex.rmarkdown\npackage_names.txt\nr_release.txt\nrelease_names.txt\nsecret_directory\nsoccer_directory\nteam_standings.csv\nteam_standings_3.csv\n```\n:::\n:::\n\n\n\n\n\n# Input and output\n\nIn this section, we will explore commands that will\n\n- display messages\n- print file contents\n- sort file contents\n- count length of file\n\n| Command\t| Description | \n| ------- | ------------ |\n| `echo`    | Display messages |\n| `cat`     | Print contents of a file |\n| `head`    | Prints first ten lines of a file by default |\n| `tail`    | Prints last ten lines of a file by default |\n| `more`    | Open a file for interactive reading, scrolling and searching |\n| `less`    | Open a file for interactive reading, scrolling and searching |\n| `sort`    | Sort a file in ascending order |\n| `wc`      | Count length (words or lines) in a file | \n\n## Display messages\n\nThe `echo` command **prints text** to the terminal. \n\nIt can be used for writing or appending messages to a file as well.\n\n| Command\t| Description |\n| ------- | ------------ |\n| `echo`        | Display messages | \n| `echo -n`     | Print message without trailing new line | \n| `echo > file` | Write message to a file | \n| `echo -e`     | Enable interpretation of special characters | \n\nLet us start with a simple example. We will print the text \"Funny-Looking Kid\" to the terminal. It is the release name for R version 4.2.1.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho Funny-looking Kid\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFunny-looking Kid\n```\n:::\n:::\n\n\nIf we wanted to redirect that output from printing to the terminal and write to a file, we use the `>` syntax\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho Funny-looking Kid > r_release.txt\ncat r_release.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFunny-looking Kid\n```\n:::\n:::\n\n\n## Print file contents\n\nThe `cat` (stands for _cat_enate) command reads data from files, and outputs their contents to the screen. \n\nIf we wanted to number all the output, use the `-n` option: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat -n release_names.txt \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n     1\tUnsuffered Consequences\n     2\tGreat Pumpkin\n     3\tDecember Snowflakes\n     4\tGift-Getting Season\n     5\tEaster Beagle\n     6\tRoasted Marshmallows\n     7\tTrick or Treat\n     8\tSecurity Blanket\n     9\tMasked Marvel\n    10\tGood Sport\n    11\tFrisbee Sailing\n    12\tWarm Puppy\n    13\tSpring Dance\n    14\tSock it to Me\n    15\tPumpkin Helmet\n    16\tSmooth Sidewalk\n    17\tFull of Ingredients\n    18\tWorld-Famous Astronaut\n    19\tFire Safety\n    20\tWooden Christmas Tree\n    21\tVery Secure Dishes\n    22\tVery, Very Secure Dishes\n    23\tSupposedly Educational\n    24\tBug in Your Hair\n    25\tSincere Pumpkin Patch\n    26\tAnother Canoe\n    27\tYou Stupid Darkness\n    28\tSingle Candle\n    29\tShort Summer\n    30\tKite Eating Tree\n```\n:::\n:::\n\n\nTo concatenate several files into one final target file, we can also use `>`: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncat r_release.txt release_names.txt > combined_names.txt\ncat combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFunny-looking Kid\nUnsuffered Consequences\nGreat Pumpkin\nDecember Snowflakes\nGift-Getting Season\nEaster Beagle\nRoasted Marshmallows\nTrick or Treat\nSecurity Blanket\nMasked Marvel\nGood Sport\nFrisbee Sailing\nWarm Puppy\nSpring Dance\nSock it to Me\nPumpkin Helmet\nSmooth Sidewalk\nFull of Ingredients\nWorld-Famous Astronaut\nFire Safety\nWooden Christmas Tree\nVery Secure Dishes\nVery, Very Secure Dishes\nSupposedly Educational\nBug in Your Hair\nSincere Pumpkin Patch\nAnother Canoe\nYou Stupid Darkness\nSingle Candle\nShort Summer\nKite Eating Tree\n```\n:::\n:::\n\n\nThe `head` command will display the first 10 lines of a file(s) by default.\nThe `tail` command displays the last 10 lines of a file(s) by default.\n\nIt can be used to display the first (or last) few lines or bytes of a file as well.\n\n| Command\t| Description |\n| ------- | ------------ |\n| `head` | Output the first parts of a file | \n| `head -n num` | Output the first `num` lines of a file | \n| `head -c num` | Output the first `num` bytes of a file | \n| `tail` | Display the last part of a file | \n| `tail -n num` | Show the last `num` lines of a file | \n| `tail -n +num` | Show all contents of the file starting from `num` line | \n| `tail -c num` | Show last `num` bytes of a file | \n\nTo show the head of the first 8 lines of the `combined_names.txt` file: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nhead -c 8 combined_names.txt \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nFunny-lo\n```\n:::\n:::\n\n\nTo show all the lines starting from line 8 and beyond: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ntail -n +8 combined_names.txt \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nTrick or Treat\nSecurity Blanket\nMasked Marvel\nGood Sport\nFrisbee Sailing\nWarm Puppy\nSpring Dance\nSock it to Me\nPumpkin Helmet\nSmooth Sidewalk\nFull of Ingredients\nWorld-Famous Astronaut\nFire Safety\nWooden Christmas Tree\nVery Secure Dishes\nVery, Very Secure Dishes\nSupposedly Educational\nBug in Your Hair\nSincere Pumpkin Patch\nAnother Canoe\nYou Stupid Darkness\nSingle Candle\nShort Summer\nKite Eating Tree\n```\n:::\n:::\n\n\nThe `more` command displays text, one screen at a time. It opens a file for\n\n- interactive reading\n- scrolling\n- searching\n\n:::{.callout-tip}\n\nPress space to scroll down the page, the forward slash (`/`) for searching strings, `n` to go to the next match and `q` to quit.\n\n:::\n\n| Command\t| Description |\n| ------- | ------------ |\n| `more`    | Open a file for interactive reading, scrolling and searching |\n| `space`   | Page down |\n| `/`       | Search for a string; press n to go the next match |\n| `q`       | Quit |\n\nThe `less` command is similar to more but offers more features. \n\nIt allows the user to scroll up and down, go to the beginning and end of the file, forward and backward search and the ability to go the next and previous match while searching the file.\n\n| Command\t| Description |\n| ------- | ------------ |\n| `less\t`   | Open a file for interactive reading, scrolling and searching | \n| `space`   | Page down | \n| `b`   | Page up | \n| `G`   | Go to the end of file | \n| `g`   | Go to the start of file | \n| `/`   | Forward search | \n| `?`   | Backward search | \n| `n`   | Go to next match | \n| `N`   | Go to previous match | \n| `q   | Quit | \n\n\n## Sort files\n\nThe `sort` command will sort the contents of text file, line by line. Using additional options, we can\n\n- sort a file in ascending/descending order\n- ignore case while sorting\n- use numeric order for sorting\n- preserve only unique lines while sorting\n\n:::{.callout-tip}\n\nUsing the `sort` command, the contents can be sorted numerically and alphabetically. By default, the rules for sorting are:\n\n- lines starting with a number will appear before lines starting with a letter.\n- lines starting with a letter that appears earlier in the alphabet will appear before lines starting with a letter that appears later in the alphabet.\n- lines starting with a lowercase letter will appear before lines starting with the same letter in uppercase.\n\n:::\n\nUsing additional options, the rules for sorting can be changed. We list the options in the below table.\n\n| Command\t| Description |\n| ------- | ------------ |\n| `sort` | Sort lines of text files\n| `sort -r` | Sort a file in descending order\n| `sort --ignore-case` | Ignore case while sorting\n| `sort -n` | Use numeric order for sorting\n| `sort -u` | Preserve only unique lines while sorting\n\nHere we are sorting in a descending alphabetical order of the `combined_names.txt`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsort -r combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nYou Stupid Darkness\nWorld-Famous Astronaut\nWooden Christmas Tree\nWarm Puppy\nVery, Very Secure Dishes\nVery Secure Dishes\nUnsuffered Consequences\nTrick or Treat\nSupposedly Educational\nSpring Dance\nSock it to Me\nSmooth Sidewalk\nSingle Candle\nSincere Pumpkin Patch\nShort Summer\nSecurity Blanket\nRoasted Marshmallows\nPumpkin Helmet\nMasked Marvel\nKite Eating Tree\nGreat Pumpkin\nGood Sport\nGift-Getting Season\nFunny-looking Kid\nFull of Ingredients\nFrisbee Sailing\nFire Safety\nEaster Beagle\nDecember Snowflakes\nBug in Your Hair\nAnother Canoe\n```\n:::\n:::\n\n\n\n## Count length of file\n\n`wc` (word count) will print newline, word, and byte counts for file(s). If more than one file is specified, it will also print total line.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n      31      75     564 combined_names.txt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -l combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n      31 combined_names.txt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -w combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n      75 combined_names.txt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nwc -c combined_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n     564 combined_names.txt\n```\n:::\n:::\n\n\n\n\n\n# Search and regular expression \n\nIn this section, we will explore commands that will\n\n- search for a given string in a file\n- find files using names\n- search for binary executable files\n\n\n| Command\t| Description | \n| ------- | ------------ |\n| `grep` | Search for a given string in a file | \n| `find` | Find files using filenames | \n| `which` | Search for binary executable files | \n\n\n## Search for a string in a file\n\nThe `grep` command is used for pattern matching. Along with additional options, it can be used to\n\n- match pattern in input text\n- ignore case\n- search recursively for an exact string\n- print filename and line number for each match\n- invert match for excluding specific strings\n\n`grep` (stands for global regular expression) **processes text line by line**, and prints any lines which match a specified pattern. \n\nIt is a powerful tool for matching a regular expression against text in a file, multiple files, or a stream of input.\n\n| Command\t| Description | \n| ------- | ------------ |\n| `grep` | Matches pattern in input text\n| `grep -i` | Ignore case\n| `grep -RI` | Search recursively for an exact string\n| `grep -E` | Use extended regular expression\n| `grep -Hn` | Print file name & corresponding line number for each match\n| `grep -v` | Invert match for excluding specific strings\n\nFirst, we will search for packages that include the letter \"R\" in a list of R package names (`package_names.txt`). \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep R package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n14. RJDBC\n30. logNormReg\n27. gLRTH\n35. fermicatsR\n42. OptimaRegion\n61. PropScrRand\n25. RPyGeo\n47. SMARTp\n24. SCRT\n56. MARSS\n85. edfReader\n32. SPEDInstabR\n98. SmallCountRounding\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep --color R package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n14. RJDBC\n30. logNormReg\n27. gLRTH\n35. fermicatsR\n42. OptimaRegion\n61. PropScrRand\n25. RPyGeo\n47. SMARTp\n24. SCRT\n56. MARSS\n85. edfReader\n32. SPEDInstabR\n98. SmallCountRounding\n```\n:::\n:::\n\nIf there is more than one file to search, use the `-H` option to print the filename for each match.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep -H F r_release.txt package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nr_release.txt:Funny-looking Kid\npackage_names.txt:69. FField\npackage_names.txt:78. sybilccFBA\n```\n:::\n:::\n\n\nAnd here is the file name and line number\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep -Hn F r_release.txt package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nr_release.txt:1:Funny-looking Kid\npackage_names.txt:82:69. FField\npackage_names.txt:93:78. sybilccFBA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\ngrep -vi R r_release.txt package_names.txt\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\nr_release.txt:Funny-looking Kid\npackage_names.txt:36. mlflow\npackage_names.txt:10. aweek\npackage_names.txt:31. BIGDAWG\npackage_names.txt:22. vqtl\npackage_names.txt:29. sspline\npackage_names.txt:39. mev\npackage_names.txt:66. SuppDists\npackage_names.txt:15. MIAmaxent\npackage_names.txt:31. BIGDAWG\npackage_names.txt:29. sspline\npackage_names.txt:60. Eagle\npackage_names.txt:83. WPKDE\npackage_names.txt:11. hdnom\npackage_names.txt:26. blink\npackage_names.txt:18. gazepath\npackage_names.txt:52. ClimMobTools\npackage_names.txt:44. expstudies\npackage_names.txt:65. mined\npackage_names.txt:81. mgcViz\npackage_names.txt:45. solitude\npackage_names.txt:9. pAnalysis\npackage_names.txt:65. mined\npackage_names.txt:94. ICAOD\npackage_names.txt:48. geoknife\npackage_names.txt:45. solitude\npackage_names.txt:67. tictactoe\npackage_names.txt:46. cbsem\npackage_names.txt:93. PathSelectMP\npackage_names.txt:96. poisbinom\npackage_names.txt:17. ASIP\npackage_names.txt:5. pls\npackage_names.txt:84. BIOMASS\npackage_names.txt:59. AdMit\npackage_names.txt:77. SetMethods\npackage_names.txt:53. MVB\npackage_names.txt:2. odk\npackage_names.txt:86. mongolite\npackage_names.txt:4. TIMP\npackage_names.txt:97. AnalyzeTS\npackage_names.txt:87. WGScan\npackage_names.txt:63. dagitty\npackage_names.txt:69. FField\npackage_names.txt:13. MaXact\npackage_names.txt:73. VineCopula\npackage_names.txt:7. bayesbio\npackage_names.txt:34. ibd\npackage_names.txt:8. MVTests\npackage_names.txt:19. mcmcabn\npackage_names.txt:43. accept\npackage_names.txt:78. sybilccFBA\npackage_names.txt:62. lue\npackage_names.txt:100. addhaz\npackage_names.txt:37. CombinePValue\npackage_names.txt:1. cyclocomp\npackage_names.txt:54. OxyBS\n```\n:::\n:::\n\n\n\n\n\n\n# Data transfer\n\n# File compression\n\n# System info \n\n\n# Pipes and filters\n\nHow can I combine existing commands to do new things?\n\n# Loops\t\nHow can I perform the same actions on many different files?\n\n# Finding things\n\n\n\n\n``` {.bash filename=\"Hi\"}\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\n```\n\n``` {{r}}\nmean(1:5)\n```\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1.  Add here.\n:::\n\n### Additional Resources\n\n::: callout-tip\n-   Add here.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}