{
  "hash": "5239bdbd2ce1b5290876143ed7e26c6f",
  "result": {
    "markdown": "---\ntitle: \"Building websites with `quarto`\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Building a websites with `quarto`\"\ndate: 2022-10-27\ncategories: [module 1, week 1, websites, quarto]\n---\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1. [Mine and Julia's talk about Collaborating with Quarto](https://www.rstudio.com/conference/2022/keynotes/collaborate-with-quarto/)\n2. [Joe Cheng's Shiny Talk](https://www.rstudio.com/conference/2022/keynotes/past-future-shiny/)\n3. Quarto Publishing System: <https://quarto.org>\n\n\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- [Ted Laderas's talk on Quarto/RMarkdown - What's Different?](https://laderast.github.io/qmd_rmd)\n- Quarto Publishing System: <https://quarto.org>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n- Be able to describe reasons why having a personal website can be useful. \n- Recognize what is Quarto and how it's different from RMarkdown.\n- Be able to create a Quarto project and Quarto website.\n\n:::\n\n# Introduction \n\nA professional web presence through a personal website can be powerful given the world we live in with much of our lives on the web (e.g. zoom meetings). \n\nThere are many great tools to be able to help you get started on building a personal website.\n\n:::{.callout-tip}\n\n### Reasons why creating a personal website can be helpful\n\n1. A website gives you a home to build a brand for yourself and summarize the work you do. \n2. You can connect with broader audiences.\n3. A website can give you broader professional visibility. \n4. Creating a website demonstrates literacy with working with websites.\n5. In addition to the scholarship you are creating, a website gives an opportunity for others to connect with you (rather than just learn about your scholarship).\n6. It helps future employers learn about who you are. \n\n:::\n\n# What is Quarto?\n\n\n[Quarto](https://quarto.org/) is a publishing system built on Pandoc that allows users to create dynamic content using R, Python, Julia, and ObservableJS (with plans to add more languages too!).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../../images/quarto_schematic.png){fig-align='center' fig-alt='A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.' width=4000}\n:::\n:::\n\n\n::: column-margin\nArt by [Allison Horst](https://twitter.com/allison_horst). Be sure to check out the rest of Allison's seriously cute Quarto penguin art in the #rstudioconf2022 keynote talk, [Hello Quarto](https://mine.quarto.pub/hello-quarto/#/hello-quarto-title), by [Julie Lowndes](https://twitter.com/juliesquid) & [Mine Çetinkaya-Rundel](https://twitter.com/minebocek)!\n:::\n\n\n:::{.callout-tip}\n\n### What is Quarto for someone who uses RStudio? \n\nComing from the perspective of someone who uses RStudio, this is another way of thinking about Quarto: \n\n- Quarto is a multi-language, next-generation version of R Markdown from RStudio, and includes dozens of new features and capabilities while at the same being able to render most existing Rmd files without modification.\n\n- R users have long loved [RMarkdown](https://rmarkdown.rstudio.com/) for combining prose, code, and outputs into single \"knitted\" documents. Quarto extends all of RMarkdown's best features (plus many more!) to additional languages.\n\n- You can edit code and markdown in RStudio just as you would with any computational document (e.g. R Markdown), and preview the rendered document in the Viewer tab as you work.\n\n:::\n\nThe following is a Quarto document with the extension `.qmd` (on the left) along with its rendered version as HTML (on the right). You could also choose to render it into other formats like PDF, MS Word, etc.\n\n![](../../images/rstudio-hello.png){.column-page-right .border fig-alt=\"RStudio with a Quarto document titled \\\"Penguins, meet Quarto!\\\" open on the left side and the rendered version of the document on the right side.\" fig-align=\"center\"}\n\nThis is the basic model for Quarto publishing---take a source document and render it to a variety of output formats.\n\n\n:::{.callout-important}\n\nFor the purposes of the course, I am assuming you are already familiar with the Markdown language and working with RMarkdown files as this was covered in 140.776. \n\nPlease see [RMarkdown](https://rmarkdown.rstudio.com/) for questions on this topic.\n\n:::\n\n:::{.callout-tip}\n\n### Great intro Quarto tutorials\n\nHere are a series of tutorials designed to introduce you to Quarto with RStudio\n\n1. Hello, Quarto: <https://quarto.org/docs/get-started/hello/rstudio.html>\n2. Computations: <https://quarto.org/docs/get-started/computations/rstudio.html>\n3. Authoring: <https://quarto.org/docs/get-started/authoring/rstudio.html>\n\n:::\n\n\n:::{.callout-tip}\n\n### Quarto file format\n\nQuarto uses one file format (read more here in [Quarto's documentation](https://quarto.org/docs/guide/)) and one syntax to create many different types of high-quality outputs:\n\n  - Documents\n  - Websites\n  - Publications\n  - Blogs\n  - Slides / presentations\n  - Books\n  - Dashboards\n  \n:::\n\n:::{.callout-tip}\n\n### Quarto summary\n\n- Create dynamic content with Python, R, Julia, and Observable.\n- Author documents as plain text markdown or Jupyter notebooks.\n- Publish high-quality articles, reports, presentations, websites, blogs, and books in HTML, PDF, MS Word, ePub, and more.\n- Author with scientific markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.\n\n:::\n\n\n## .qmd files\n\nQuarto files end in a `.qmd`. This is short for **q**uarto **m**ark**d**own. \n\n:::{.callout-note}\n\n### Note\n\nThese files are decoupled from RStudio IDE and there are plugins to work with `.qmd` files for \n\n- VSCode\n- JupyterLab\n- RStudio\n\n:::\n\n\n### Rendering\n\nUse the <kbd>![](../../images/rstudio-render-button.png){width=\"25\" height=\"20\"}</kbd> **Render** button in the RStudio IDE to render the file and preview the output with a single click or keyboard shortcut (⇧⌘K).\n\n![](../../images/rstudio-render.png){.border fig-alt=\"Top of the text editor in RStudio with the Render button highlighted with a purple box.\" fig-align=\"center\"}\n\nIf you prefer to automatically render whenever you save, you can check the Render on Save option on the editor toolbar.\nThe preview will update whenever you re-render the document.\nSide-by-side preview works for both HTML and PDF outputs.\n\n![](../../images/rstudio-render-on-save.png){.border fig-alt=\"Top of the text editor in RStudio with the Render on Save checbox checked and highlighted with a purple box.\" fig-align=\"center\"}\n\n\n:::{.callout-note}\n\nDocuments can also be rendered from the R console via the **quarto** package:\n\n```{.R filename=\"Code run in the R Console\"}\ninstall.packages(\"quarto\")\nquarto::quarto_render(\"hello.qmd\")\n```\n\nAnd documents can also be rendered from the command line: \n\n```{.bash filename=\"Code run in the command line\"}\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\n```\n\n:::\n\n#### How rendering works\n\nWhen you render a Quarto document, first [knitr](http://yihui.name/knitr/) executes all of the code chunks and creates a new markdown (.md) document which includes the code and its output.\nThe markdown file generated is then processed by [pandoc](http://pandoc.org/), which creates the finished format.\nThe Render button encapsulates these actions and executes them in the right order for you.\n\n![](../../images/rstudio-qmd-how-it-works.png){.border fig-alt=\"Workflow diagram starting with a qmd file, then knitr, then md, then pandoc, then PDF, MS Word, or HTML.\" fig-align=\"center\"}\n\nWhen rendering, Quarto generates a new file that contains selected text, code, and results from the .qmd file.\nThe new file can be an [HTML](https://quarto.org/docs/output-formats/all-formats.html), [PDF](https://quarto.org/docs/output-formats/pdf-basics.html), [MS Word](https://quarto.org/docs/output-formats/ms-word.html) document, [presentation](https://quarto.org/docs/presentations/), [website](https://quarto.org/docs/websites/), [book](https://quarto.org/docs/books/), [interactive document](https://quarto.org/docs/interactive/), or [other format](https://quarto.org/docs/output-formats/all-formats.html).\n\n\n### Authoring\n\nIn the image below we can see the same document in the two modes of the RStudio editor: visual (on the left) and source (on the right).\nRStudio's [visual editor](/docs/visual-editor/) offers an [WYSIWYM](https://en.wikipedia.org/wiki/WYSIWYM) authoring experience for markdown.\nFor formatting (e.g. bolding text) you can use the toolbar, a keyboard shortcut (⌘B), or the markdown construct (`**bold**`).\n\nThe plain text source code underlying the document is written for you and you can view/edit it at any point by switching to source mode for editing.\nYou can toggle back and forth these two modes by clicking on **Source** and **Visual** in the editor toolbar (or using the keyboard shortcut ⌘⇧ F4).\n\n![](../../images/rstudio-source-visual.png){.column-page-right fig-alt=\"On the left: Document in the visual editor. On the right: Same document in the source editor. The visual/source editor toggle is highlighted in both documents marking their current state. The document shown is the \\\"Hello Quarto\\\" document from a previous image on the page.\" fig-align=\"center\"}\n\n\n\n\n### How does multi-language support work? \n\n:::{.callout-tip}\n\n### Quarto supports multiple languages\n\nThese languages include\n\n  - R\n  - Python\n  - Julia\n  - Observable\n  \nQuarto can also [interchange between languages using Apache Arrow](https://gist.github.com/hrbrmstr/23355194d1964688596553a0e6a0050a).\n\n:::\n\nThe idea behind how quarto supports multi-language code is that the code output is \"frozen\" by default after it is rendered. \n\nIn this way, code output is not recomputed, unless you want it to. \n\n## R Markdown vs Quarto\n\nSome high-level differences include\n\n- Standardized YAML across formats\n- Decoupled from RStudio\n- More consistent presentation across formats\n- [Tab Panels](https://quarto.org/docs/interactive/layout.html#tabset-panel)\n- [Code Highlighting](https://quarto.org/docs/output-formats/html-code.html#highlighting)\n\n### Code block options\n\nAnother noticeable difference are options for code blocks. Rather than being in the header of the code block, options are **moved to within the code block** using the `#|` (hash-pipe) for each line. \n\n\nThis is a code block for R Markdown: \n\n````{.markdown}\n```{{r setup, include=FALSE}}\nlibrary(tidyverse)\nlibrary(tidytext)\n```\n````\n\nThis is a code block for Quarto: \n\n```{{r}}\n#| label: \"setup\"\n#| include: false\nlibrary(tidyverse)\nlibrary(tidytext)\n```\n\n\n### Output Options\n\nThere are a wide variety of options available for customizing output from executed code. All of these options can be specified either globally (in the document front-matter) or per code-block. For example, here's a modification of the Python example to specify that we don't want to \"echo\" the code into the output document:\n\n``` yaml\n---\ntitle: \"My Document\"\nexecute:\n  echo: false\njupyter: python3\n---\n```\n\nNote that we can override this option on a per code-block basis. For example:\n\n``` {{python}}\n#| echo: true\n\nimport matplotlib.pyplot as plt\nplt.plot([1,2,3,4])\nplt.show()\n```\n\nCode block options available for customizing output include:\n\n| Option    | Description                                                                                                                                                                                       |\n|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `eval`    | Evaluate the code chunk (if `false`, just echos the code into the output).                                                                                                                        |\n| `echo`    | Include the source code in output                                                                                                                                                                 |\n| `output`  | Include the results of executing the code in the output (`true`, `false`, or `asis` to indicate that the output is raw markdown and should not have any of Quarto's standard enclosing markdown). |\n| `warning` | Include warnings in the output.                                                                                                                                                                   |\n| `error`   | Include errors in the output (note that this implies that errors executing code will not halt processing of the document).                                                                        |\n| `include` | Catch all for preventing any output (code or results) from being included (e.g. `include: false` suppresses all output from the code block).                                                      |\n\nHere's a Knitr example with some of these additional options included:\n\n    ---\n    title: \"Knitr Document\"\n    execute:\n      echo: false\n    ---\n\n    ```{{r}}\n    #| warning: false\n\n    library(ggplot2)\n    ggplot(airquality, aes(Temp, Ozone)) + \n      geom_point() + \n      geom_smooth(method = \"loess\", se = FALSE)\n    ```\n\n    ```{{r}}\n    summary(airquality)\n    ```\n\n::: callout-tip\nWhen using the Knitr engine, you can also use any of the available native options (e.g. `collapse`, `tidy`, `comment`, etc.). See the [Knitr options documentation](https://yihui.org/knitr/options/) for additional details. You can include these native options in option comment blocks as shown above, or on the same line as the `{r}` as shown in the Knitr documentation.\n:::\n\n### Margin content\n\nYou can place content within the right margin of Quarto document. For example, here we use the `.column-margin` class to place an image in the margin:\n\n\n``` md\n::: {.column-margin}\nWe know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n:::\n```\n\n::: column-margin\nWe know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:\n\n$$\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).$$\n:::\n\n\n### Margin Figures\n\nFigures that you create using code cells can be placed in the margin by using the `column: margin` code cell option. \n\nIf the code produces more than one figure, each of the figures will be placed in the margin.\n\n\n::: {.cell .column-margin}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-mtcars\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| column: margin\nlibrary(ggplot2)\nmtcars2 <- mtcars\nmtcars2$am <- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n```\n````\n\n::: {.cell-output-display}\n![MPG vs horsepower, colored by transmission.](index_files/figure-html/fig-mtcars-1.png){#fig-mtcars width=672}\n:::\n:::\n\n\n### Margin Tables\n\nYou an also place tables in the margin of your document by specifying `column: margin`.\n\n\n::: {.cell .column-margin}\n\n````{.cell-code}\n```{{r}}\n#| column: margin\nknitr::kable(\n  mtcars[1:6, 1:3]\n)\n```\n````\n\n::: {.cell-output-display}\n|                  |  mpg| cyl| disp|\n|:-----------------|----:|---:|----:|\n|Mazda RX4         | 21.0|   6|  160|\n|Mazda RX4 Wag     | 21.0|   6|  160|\n|Datsun 710        | 22.8|   4|  108|\n|Hornet 4 Drive    | 21.4|   6|  258|\n|Hornet Sportabout | 18.7|   8|  360|\n|Valiant           | 18.1|   6|  225|\n:::\n:::\n\n\n### Code line numbers\n\nIf you want to display line numbers alongside the code block, add the `code-line-numbers` option. For example:\n\n``` yaml\nformat:\n  html:\n    code-line-numbers: true\n```\n\nHere's how a code block with line numbers would display throughout the document:\n\n``` {.r code-line-numbers=\"true\"}\nlibrary(ggplot2)\nmtcars2 <- mtcars\nmtcars2$am <- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n\n```\n\nYou can also enable line numbers for an individual code block using the `code-line-numbers` attribute. \n\n\n\n### Should you switch to quarto?\n\n> Should you switch to Quarto? Not necessarily. \n> If you find R Markdown meet your need, you can definitely stay there. It is not imperative to switch. - Yihui Xie\n\n::: aside\n<https://yihui.org/en/2022/04/quarto-r-markdown/>\n:::\n\n\n\n\n# Quarto demo\n\nHere we will demo create two Quarto products: \n\n1. A Quarto project\n2. A Quarto website \n\n## Project\n\nHere are the general steps for creating a Quarto project: \n\n1. Create a new Quarto project\n2. Edit `_quarto.yml` file\n3. Add / delete relevant content\n4. Render the project\n\n## Website \n\nHere are the general steps for creating a Quarto website: \n\n1. Create a new Quarto project\n2. Edit `_quarto.yml` file\n3. Add / delete relevant content\n4. Render the website\n5. Deploy the website\n\n:::{.callout-tip }\n\n### Deploying a website \n\n`quarto publish` can push and update a number of different kinds of webhosts. \nYou will need credentials to publish to each of these.\n\n```{.bash}\nquarto publish gh-pages    # GitHub Pages\nquarto publish quarto-pub  # Quarto.pub \nquarto publish netlify     # Netlify\nquarto publish connect     # RStudio Connect\n```\n\n:::\n\n## Freeze Results and avoid recomputing\n\nFreezing code output is generally used when you have either \n\n- A large number of collaborators or \n- Many computational documents created over a longer period of time\n- A project with different types of file formats from different languages (e.g. `.qmd`, `.ipynb`, `.Rmd`)\n\nIn the above cases, it can be challenging to fully re-execute every document when you render the site. \n\nThis could be because some documents have esoteric or environment-specific requirements (e.g. require access/authentication to a data source) or due to general fragility of dependencies over time. \n\nUsing freeze ensures that you can always reproducibly render your site.\n\nThe computational results of documents executed with `freeze` are stored in the `_freeze/` directory, and re-used when needed to fulfill document renders.\n\nYou should check the contents of `_freeze/` into version control so that others rendering the project don't need to reproduce your computational environment to render it in their environment.\n\n:::{.callout-note}\n\n### Note\n\nYou will still want to take care to fully re-render your project when things outside of source code change (e.g. input data). \n\nYou can remove previously frozen output by deleting the `_freeze` folder at the root of your project.\n\n:::\n\nFor example, consider the `_quarto.yml` file. \n\nOne argument in the file is the `freeze` option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\n\n``` yaml\nproject:\n  title: \"qmd_rmd\"\n  type: website\n  output-dir: docs\n  \nexecute:\n  freeze: true  # never re-render during project render\n```\n\n``` yaml\nproject:\n  title: \"qmd_rmd\"\n  type: website\n  output-dir: docs\n\nexecute:\n  freeze: auto  # re-render only when source changes\n```\n\n:::{.callout-note}\n\n### Note\n\nThe `freeze` option in the `_quarto.yml` file controls whether **execution occurs** during global project renders. \n\nIf you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n\n```{.bash filename=\"Terminal\"}\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\n```\n\n:::\n\n\n## Next steps\n\nHere are some tutorials I really like for getting started with Quarto generally and for getting started building and deploying websites with Quarto: \n\n- [Creating Quarto websites](https://ucsb-meds.github.io/creating-quarto-websites)\n- [Customize Quarto websites](https://ucsb-meds.github.io/customizing-quarto-websites)\n\n# Post-lecture materials\n\n### Additional Resources\n\n::: callout-tip\n\n1. [Mine and Julia's talk about Collaborating with Quarto](https://www.rstudio.com/conference/2022/keynotes/collaborate-with-quarto/)\n2. [Joe Cheng's Shiny Talk](https://www.rstudio.com/conference/2022/keynotes/past-future-shiny/)\n3. Quarto Publishing System: <https://quarto.org>\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}