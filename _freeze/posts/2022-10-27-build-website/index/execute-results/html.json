{
  "hash": "3e8e07cd6d307540484760f83aa192d0",
  "result": {
    "markdown": "---\ntitle: \"Building websites with `quarto`\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Building a websites with `quarto`\"\ndate: 2022-10-27\ncategories: [module 1, week 1, websites, quarto]\n---\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1. [Mine and Julia's talk about Collaborating with Quarto](https://www.rstudio.com/conference/2022/keynotes/collaborate-with-quarto/)\n2. [Joe Cheng's Shiny Talk](https://www.rstudio.com/conference/2022/keynotes/past-future-shiny/)\n3. Quarto Publishing System: <https://quarto.org>\n\n\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- [Ted Laderas's talk on Quarto/RMarkdown - What's Different?](https://laderast.github.io/qmd_rmd)\n- Quarto Publishing System: <https://quarto.org>\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n- Be able to describe reasons why having a personal website can be useful. \n- Recognize what is Quarto and how it's different from RMarkdown.\n- Convert a RMarkdown file (`.Rmd`) to a Quarto file (`.qmd`).\n\n:::\n\n# Introduction \n\nA professional web presence through a personal website can be powerful given the world we live in with much of our lives on the web (e.g. zoom meetings). \n\nThere are many great tools to be able to help you get started on building a personal website.\n\n:::{.callout-tip}\n\n### Reasons why creating a personal website can be helpful\n\n1. A website gives you a home to build a brand for yourself and summarize the work you do. \n2. You can connect with broader audiences.\n3. A website can give you broader professional visibility. \n4. Creating a website demonstrates literacy with working with websites.\n5. In addition to the scholarship you are creating, a website gives an opportunity for others to connect with you (rather than just learn about your scholarship).\n6. It helps future employers learn about who you are. \n\n:::\n\n# What is Quarto?\n\n\n[Quarto](https://quarto.org/) is a publishing system built on Pandoc that allows users to create dynamic content using R, Python, Julia, and ObservableJS (with plans to add more languages too!).\n\nR users have long loved [RMarkdown](https://rmarkdown.rstudio.com/) for combining prose, code, and outputs into single \"knitted\" documents. Quarto extends all of RMarkdown's best features (plus many more!) to additional languages.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../../images/quarto_schematic.png){fig-align='center' fig-alt='A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.' width=4000}\n:::\n:::\n\n\n::: column-margin\nArt by [Allison Horst](https://twitter.com/allison_horst). Be sure to check out the rest of Allison's seriously cute Quarto penguin art in the #rstudioconf2022 keynote talk, [Hello Quarto](https://mine.quarto.pub/hello-quarto/#/hello-quarto-title), by [Julie Lowndes](https://twitter.com/juliesquid) & [Mine Ã‡etinkaya-Rundel](https://twitter.com/minebocek)!\n:::\n\nYou can explore [Quarto's documentation](https://quarto.org/docs/guide/) to learn more about creating documents, websites, blogs, books, slides, etc.\n\nYou use one file format and one syntax to be able to create many different types of outputs:\n\n  - Website\n  - Publications\n  - Books\n  - Dashboards\n\n:::{.callout-tip}\n\n### Quarto highlights\n\n- Create dynamic content with Python, R, Julia, and Observable.\n- Author documents as plain text markdown or Jupyter notebooks.\n- Publish high-quality articles, reports, presentations, websites, blogs, and books in HTML, PDF, MS Word, ePub, and more.\n- Author with scientific markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.\n\n:::\n\n\n## .qmd files\n\nQuarto files end in a `.qmd`. This is short for **q**uarto **m**ark**d**own. \n\n:::{.callout-note}\n\n### Note\n\nThese files are decoupled from RStudio IDE and there are plugins to work with `.qmd` files for \n\n- VSCode\n- JupyterLab\n- RStudio\n\n:::\n\nYou can render `.qmd` files within RStudio, just like a `.Rmd` file. \n\nAnother useful thing quarto is that you can render `.qmd` files on the command line: \n\n```{.bash}\nquarto render my_document.qmd\n```\n\n:::{.callout-tip}\n\n### Quarto supports multiple languages\n\nThese languages include\n\n  - R\n  - Python\n  - Julia\n  - Observable\n  \nQuarto can also [interchange between languages using Apache Arrow](https://gist.github.com/hrbrmstr/23355194d1964688596553a0e6a0050a).\n\n:::\n\n\n### How does multi-language support work? \n\nThe idea behind how quarto supports multi-language code is that the code output is \"frozen\" by default after it is rendered. \n\nIn this way, code output is not recomputed, unless you want it to (`quarto render --execute`). \n\nThere is a file called `_quarto.yml` and in the file, you can set a global argument in the following way: \n\n``` yaml\nexecute:\n  freeze: auto  # re-render only when source changes\n```\n\n\n## R Markdown vs Quarto\n\nSome differences include\n\n- Standardized YAML across formats\n- Decoupled from RStudio\n- More consistent presentation across formats\n- Tab Panels \n- Code Highlighting\n\n### code chunks\n\nAnother noticeable difference are arguments for code chunks. Rather than being in the header of the code chunk, arguments are **moved to within the code chunk** using the `#|` (hash-pipe) for each line. \n\nThis is a code chunk for R Markdown: \n\n````{.markdown}\n```{{r setup, include=FALSE}}\nlibrary(tidyverse)\nlibrary(tidytext)\n```\n````\n\nThis is a code chunk for Quarto: \n\n````{.markdown}\n```{{r}}\n#| label: \"setup\"\n#| include: false\nlibrary(tidyverse)\nlibrary(tidytext)\n```\n````\n\n### Should you switch to quarto?\n\n> Should you switch to Quarto? Not necessarily. \n> If you find R Markdown meet your need, you can definitely stay there. It is not imperative to switch. - Yihui Xie\n\n::: aside\n<https://yihui.org/en/2022/04/quarto-r-markdown/>\n:::\n\n\n\n## Freeze Results and avoid recomputing\n\nFreezing code output is generally used when you have either \n\n- A large number of collaborators or \n- Many computational documents created over a longer period of time\n\nIn both cases it can be challenging to fully re-execute every document when you render the site. This could be because some documents have esoteric or environment-specific requirements (e.g. require access/authentication to a data source) or due to general fragility of dependencies over time. \n\nUsing freeze ensures that you can always reproducibly render your site.\n\nThe computational results of documents executed with `freeze` are stored in the `_freeze/` directory, and re-used when needed to fulfill document renders.\n\nYou should check the contents of `_freeze/` into version control so that others rendering the project don't need to reproduce your computational environment to render it in their environment.\n\n:::{.callout-note}\n\n### Note\n\nYou will still want to take care to fully re-render your project when things outside of source code change (e.g. input data). \n\nYou can remove previously frozen output by deleting the `_freeze` folder at the root of your project.\n\n:::\n\nFor example, consider the `_quarto.yml` file. \n\nOne argument in the file is the `freeze` option to denote that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes:\n\n``` yaml\nproject:\n  title: \"qmd_rmd\"\n  type: website\n  output-dir: docs\n  \nexecute:\n  freeze: true  # never re-render during project render\n```\n\n``` yaml\nproject:\n  title: \"qmd_rmd\"\n  type: website\n  output-dir: docs\n\nexecute:\n  freeze: auto  # re-render only when source changes\n```\n\n:::{.callout-note}\n\n### Note\n\n`freeze` controls whether **execution occurs** during global project renders. \n\nIf you do an incremental render of either a single document or a project sub-directory then code is always executed. For example:\n\n```{.bash filename=\"Terminal\"}\n# render single document (always executes code)\nquarto render document.qmd\n\n# render project subdirectory (always executes code)\nquarto render articles\n```\n\n:::\n\n# Deploying a website \n\n`quarto publish` can push and update a number of different kinds of webhosts. \nYou will need credentials to publish to each of these.\n\n```{.bash}\nquarto publish gh-pages    # GitHub Pages\nquarto publish quarto-pub  # Quarto.pub \nquarto publish netlify     # Netlify\nquarto publish connect     # RStudio Connect\n```\n\n\n# Quarto demo\n\nDemo in class, but here are the general steps: \n\n1. Create a new Quarto project\n2. Edit `_quarto.yml` file\n3. Add / delete relevant content\n4. Render the website\n5. Deploy the website\n\n\n## Next steps\n\nHere are some tutorials I really like for getting started with Quarto generally and for getting started building and deploying websites with Quarto: \n\n- [Creating Quarto websites](https://ucsb-meds.github.io/creating-quarto-websites)\n- [Customize Quarto websites](https://ucsb-meds.github.io/customizing-quarto-websites)\n\n# Post-lecture materials\n\n### Additional Resources\n\n::: callout-tip\n\n1. [Mine and Julia's talk about Collaborating with Quarto](https://www.rstudio.com/conference/2022/keynotes/collaborate-with-quarto/)\n2. [Joe Cheng's Shiny Talk](https://www.rstudio.com/conference/2022/keynotes/past-future-shiny/)\n3. Quarto Publishing System: <https://quarto.org>\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}