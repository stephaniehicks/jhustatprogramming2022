{
  "hash": "b4e98f6d58adc8ba604ce0ad756110b0",
  "result": {
    "markdown": "---\ntitle: \"Scraping data from the web with `rvest`\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Introduction to scrape (or harvest) data from web pages\"\ndate: 2022-12-15\ncategories: [module 4, week 8, html, rvest]\n---\n\n\n# Pre-lecture materials\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- <https://rvest.tidyverse.org>\n\n### Install new packages\n\nBefore we begin, you will need to install the \n`rvest` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"rvest\")\n```\n:::\n\n\nNow we load a few R packages\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rvest)\n```\n:::\n\n\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n- Learn the basics of web scraping\n- Explore the `rvest` R package for scraping data from the web\n\n:::\n\n# Introduction\n\n[`rvest`](https://rvest.tidyverse.org) is an R package that helps you scrape (or harvest) data from web pages. \n\nIt is designed to work with `magrittr` to make it easy to express common web scraping tasks, inspired by libraries like [beautiful soup](https://www.crummy.com/software/BeautifulSoup) and [RoboBrowser](https://robobrowser.readthedocs.io/en/latest/readme.html).\n\nWe will begin with a quick overview of web scraping basics followed by demonstrating the `rvest` package. \n\n# Web scraping 101 \n\nIn this section, we will first learn the basics of **HTML** and \nhow to use **CSS selectors** to refer to specific elements, then \nyou will learn how to use `rvest` functions to get data out of HTML and into R.\n\n## HTML basics\n\n**HTML** stands for \"HyperText Markup Language\" and looks like this:\n\n``` {.html}\n<html>\n<head>\n  <title>Page title</title>\n</head>\n<body>\n  <h1 id='first'>A heading</h1>\n  <p>Some text &amp; <b>some bold text.</b></p>\n  <img src='myimg.png' width='100' height='100'>\n</body>\n```\n\nHTML has a hierarchical structure formed by **elements** which consist of a start tag (e.g. `<tag>`), optional **attributes** (`id='first'`), an end tag (like `</tag>`), and **contents** (everything in between the start and end tag).\n\n:::{.callout-tip}\n\n### Note \n\nA number of tags (including `<p>` and `<li>)` don't require end tags, but I think it's best to include them because it makes seeing the structure of the HTML a little easier.\n\n:::\n\n\n### Elements\n\nAll up, there are over 100 HTML elements.\nSome of the most important are:\n\n-   Every HTML page must be must be in an `<html>` element, and it must have two children: \n    - `<head>`, which contains document metadata like the page title\n    - `<body>`, which contains the content you see in the browser\n\n-   Block tags like `<h1>` (heading 1), `<p>` (paragraph), and `<ol>` (ordered list) form the overall structure of the page.\n\n-   Inline tags like `<b>` (bold), `<i>` (italics), and `<a>` (links) formats text inside block tags.\n\nIf you encounter a tag that you have never seen before, you can find out what it does with a little googling.\n\nI recommend the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML) which are produced by Mozilla, the company that makes the Firefox web browser.\n\n### Contents\n\nMost elements can have content in between their start and end tags.\nThis content can either be text or more elements.\nFor example, the following HTML contains paragraph of text, with one word in bold.\n\n\n```{=html}\n<p>\n  Hi! My <b>name</b> is Stephanie.\n</p>\n```\n\n\nThe **children** of a node refers only to elements, so the `<p>` element above has one child, the `<b>` element.\nThe `<b>` element has no children, but it does have contents (the text \"name\").\n\nSome elements, like `<img>` can't have children.\nThese elements depend solely on attributes for their behavior.\n\n### Attributes\n\nTags can have named **attributes** which look like `name1='value1' name2='value2'`.\n\nTwo of the most important attributes are `id` and `class`, which are used in conjunction with **CSS** (Cascading Style Sheets) to control the visual appearance of the page.\n\nThese are often useful when scraping data off a page.\n\n## Reading HTML with `rvest`\n\nYou will usually start the scraping process with `read_html()`.\nThis returns a `xml_document` object which you will then manipulate using rvest functions:\n\n:::{.callout-tip}\n\n### Note \n\nThis `xml_document` class comes from the [`xml2`](https://xml2.r-lib.org) package, which is a low-level package that `rvest` builds on top of.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- read_html(\"http://rvest.tidyverse.org/\")\nclass(html)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"xml_document\" \"xml_node\"    \n```\n:::\n:::\n\n\nFor examples and experimentation, `rvest` also includes a function (`minimal_html()`) that lets you create an `xml_document` from literal HTML:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- minimal_html(\"\n  <p>This is a paragraph<p>\n  <ul>\n    <li>This is a bulleted list</li>\n  </ul>\n\")\nclass(html)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"xml_document\" \"xml_node\"    \n```\n:::\n\n```{.r .cell-code}\nhtml\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{html_document}\n<html>\n[1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] <body>\\n<p>This is a paragraph</p>\\n<p>\\n  </p>\\n<ul>\\n<li>This is a bull ...\n```\n:::\n:::\n\n\nRegardless of how you get the HTML, you will need some way to **identify the elements** that contain the data you care about.\n\n`rvest` provides two options: \n\n- CSS selectors \n- XPath expressions\n\nHere I will focus on CSS selectors because they are simpler, but still sufficiently powerful for most scraping tasks.\n\n## CSS selectors\n\nCSS is short for **cascading style sheets**, and is a tool for defining the visual styling of HTML documents.\n\nCSS includes a miniature language for **selecting elements on a page** called **CSS selectors**.\n\nCSS selectors **define patterns for locating HTML elements**, and are useful for scraping because they provide a concise way of describing which elements you want to extract.\n\nCSS selectors can be quite complex, but fortunately you only need the simplest for `rvest`, because you can also write R code for more complicated situations.\n\nThe four most important selectors are:\n\n-   `p`: selects all `<p>` elements.\n-   `.title`: selects all elements with `class` \"title\".\n-   `p.special`: selects all `<p>` elements with `class` \"special\".\n-   `#title`: selects the element with the `id` attribute that equals \"title\".\n    Id attributes must be unique within a document, so this will only ever select a single element.\n\nIf you want to learn more CSS selectors, I recommend starting with the fun [CSS dinner](https://flukeout.github.io/) tutorial and then referring to the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors).\n\nLets try out the most important selectors with a simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- minimal_html(\"\n  <h1>This is a heading</h1>\n  <p id='first'>This is a paragraph</p>\n  <p class='important'>This is an important paragraph</p>\n\")\n```\n:::\n\n\nIn `rvest` you can extract\n\n- a single element with `html_element()` or \n- all matching elements with `html_elements()`\n\nBoth functions take a document (or another element) and a css selector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml %>% html_elements(\"h1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (1)}\n[1] <h1>This is a heading</h1>\n```\n:::\n\n```{.r .cell-code}\nhtml %>% html_elements(\"p\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (2)}\n[1] <p id=\"first\">This is a paragraph</p>\n[2] <p class=\"important\">This is an important paragraph</p>\n```\n:::\n\n```{.r .cell-code}\nhtml %>% html_elements(\".important\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (1)}\n[1] <p class=\"important\">This is an important paragraph</p>\n```\n:::\n\n```{.r .cell-code}\nhtml %>% html_elements(\"#first\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (1)}\n[1] <p id=\"first\">This is a paragraph</p>\n```\n:::\n:::\n\n\n\n:::{.callout-tip}\n\n### Pro-tip\n\nIf you don't know exactly what selector you need, I highly recommend using [SelectorGadget](https://rvest.tidyverse.org/articles/selectorgadget.html), which lets you automatically generate the selector you need by supplying positive and negative examples in the browser\n\n:::\n\n## Extracting data\n\nNow that you have got the elements you care about, you will need to get data out of them.\n\nYou will usually get the data from either the text contents or an attribute.\nBut, sometimes (if you're lucky!), the data you need will be in an HTML table.\n\n### Text\n\nUse `html_text2()` to extract the plain text contents of an HTML element:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- minimal_html(\"\n  <ol>\n    <li>apple &amp; pear</li>\n    <li>banana</li>\n    <li>pineapple</li>\n  </ol>\n\")\nhtml %>% \n  html_elements(\"li\") %>% \n  html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"apple & pear\" \"banana\"       \"pineapple\"   \n```\n:::\n:::\n\n\nNote that the escaped ampersand is automatically converted to `&`; you will only ever see HTML escapes in the source HTML, not in the data returned by rvest.\n\nYou might wonder why I used `html_text2()`, since it seems to give the same result as `html_text()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml %>% \n  html_elements(\"li\") %>% \n  html_text()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"apple & pear\" \"banana\"       \"pineapple\"   \n```\n:::\n:::\n\n\nThe main difference is how the two functions handle white space.\n\nIn HTML, white space is largely ignored, and it is the structure of the elements that defines how text is laid out.\n\n`html_text2()` does its best to follow the same rules, giving you something similar to what you'd see in the browser.\nTake this example which contains a bunch of white space that HTML ignores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- minimal_html(\"<body>\n  <p>\n  This is\n  a\n  paragraph.</p><p>This is another paragraph.\n  \n  It has two sentences.</p>\n\")\n```\n:::\n\n\n`html_text2()` gives you what you expect: two paragraphs of text separated by a blank line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml %>% \n  html_element(\"body\") %>% \n  html_text2() %>% \n  cat()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a paragraph.\n\nThis is another paragraph. It has two sentences.\n```\n:::\n:::\n\n\nWhereas `html_text()` returns the garbled raw underlying text:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml %>% \n  html_element(\"body\") %>% \n  html_text() %>% \n  cat()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  \n  This is\n  a\n  paragraph.This is another paragraph.\n  \n  It has two sentences.\n```\n:::\n:::\n\n\n### Attributes\n\n**Attributes** are used to record the destination of links (the `href` attribute of `<a>` elements) and the source of images (the `src` attribute of the `<img>` element):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- minimal_html(\"\n  <p><a href='https://en.wikipedia.org/wiki/Cat'>cats</a></p>\n  <img src='https://cataas.com/cat' width='100' height='200'>\n\")\n```\n:::\n\n\nThe value of an attribute can be retrieved with `html_attr()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml %>% \n  html_elements(\"a\") %>% \n  html_attr(\"href\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"https://en.wikipedia.org/wiki/Cat\"\n```\n:::\n\n```{.r .cell-code}\nhtml %>% \n  html_elements(\"img\") %>% \n  html_attr(\"src\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"https://cataas.com/cat\"\n```\n:::\n:::\n\n\nNote that `html_attr()` always returns a string, so you may need to post-process with `as.integer()`/`readr::parse_integer()` or similar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml %>% \n  html_elements(\"img\") %>% \n  html_attr(\"width\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"100\"\n```\n:::\n\n```{.r .cell-code}\nhtml %>% \n  html_elements(\"img\") %>% \n  html_attr(\"width\") %>% \n  as.integer()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\n### Tables\n\n**HTML tables** are composed four main elements: \n\n- `<table>`\n- `<tr>` (table row)\n- `<th>` (table heading)\n- and `<td>` (table data)\n\nHere's a simple HTML table with two columns and three rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- minimal_html(\"\n  <table>\n    <tr>\n      <th>x</th>\n      <th>y</th>\n    </tr>\n    <tr>\n      <td>1.5</td>\n      <td>2.7</td>\n    </tr>\n    <tr>\n      <td>4.9</td>\n      <td>1.3</td>\n    </tr>\n    <tr>\n      <td>7.2</td>\n      <td>8.1</td>\n    </tr>\n  </table>\n  \")\n```\n:::\n\n\nBecause tables are a common way to store data, rvest includes the handy `html_table()` which converts a table into a data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml %>% \n  html_node(\"table\") %>% \n  html_table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n      x     y\n  <dbl> <dbl>\n1   1.5   2.7\n2   4.9   1.3\n3   7.2   8.1\n```\n:::\n:::\n\n\n## Element vs elements\n\nWhen using `rvest`, your eventual goal is usually to build up a data frame, and you want each row to correspond some repeated unit on the HTML page.\n\nIn this case, you should generally \n\n- start by using `html_elements()` to **select the elements that contain each observation** \n- then, use `html_element()` to extract the variables from each observation\n\nThis guarantees that you will get the same number of values for each variable because `html_element()` always returns the same number of outputs as inputs.\n\nTo illustrate this problem take a look at this simple example I constructed using a few entries from `dplyr::starwars`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml <- minimal_html(\"\n  <ul>\n    <li><b>C-3PO</b> is a <i>droid</i> that weighs <span class='weight'>167 kg</span></li>\n    <li><b>R2-D2</b> is a <i>droid</i> that weighs <span class='weight'>96 kg</span></li>\n    <li><b>Yoda</b> weighs <span class='weight'>66 kg</span></li>\n    <li><b>R4-P17</b> is a <i>droid</i></li>\n  </ul>\n  \")\n```\n:::\n\n\nIf you try to extract name, species, and weight directly, you end up with one vector of length four and two vectors of length three, and no way to align them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhtml %>% html_elements(\"b\") %>% html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C-3PO\"  \"R2-D2\"  \"Yoda\"   \"R4-P17\"\n```\n:::\n\n```{.r .cell-code}\nhtml %>% html_elements(\"i\") %>% html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"droid\" \"droid\" \"droid\"\n```\n:::\n\n```{.r .cell-code}\nhtml %>% html_elements(\".weight\") %>% html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"167 kg\" \"96 kg\"  \"66 kg\" \n```\n:::\n:::\n\n\nInstead, use `html_elements()` to find a element that corresponds to each character, then use `html_element()` to extract each variable for all observations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncharacters <- html %>% html_elements(\"li\")\n\ncharacters %>% html_element(\"b\") %>% html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C-3PO\"  \"R2-D2\"  \"Yoda\"   \"R4-P17\"\n```\n:::\n\n```{.r .cell-code}\ncharacters %>% html_element(\"i\") %>% html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"droid\" \"droid\" NA      \"droid\"\n```\n:::\n\n```{.r .cell-code}\ncharacters %>% html_element(\".weight\") %>% html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"167 kg\" \"96 kg\"  \"66 kg\"  NA      \n```\n:::\n:::\n\n\n`html_element()` automatically fills in `NA` when no elements match, keeping all of the variables aligned and making it easy to create a data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(\n  name = characters %>% html_element(\"b\") %>% html_text2(),\n  species = characters %>% html_element(\"i\") %>% html_text2(),\n  weight = characters %>% html_element(\".weight\") %>% html_text2()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    name species weight\n1  C-3PO   droid 167 kg\n2  R2-D2   droid  96 kg\n3   Yoda    <NA>  66 kg\n4 R4-P17   droid   <NA>\n```\n:::\n:::\n\n\n\n\n# SelectorGadget\n\n**SelectorGadget** is a JavaScript bookmarklet that allows you to interactively figure out what css selector you need to extract desired components from a page.\n\n## Installation\n\nTo install it, open this page in your browser, and then drag the following link to your bookmark bar: <a href=\"javascript:(function(){var%20s=document.createElement('div');s.innerHTML='Loading...';s.style.color='black';s.style.padding='20px';s.style.position='fixed';s.style.zIndex='9999';s.style.fontSize='3.0em';s.style.border='2px%20solid%20black';s.style.right='40px';s.style.top='40px';s.setAttribute('class','selector_gadget_loading');s.style.background='white';document.body.appendChild(s);s=document.createElement('script');s.setAttribute('type','text/javascript');s.setAttribute('src','https://dv0akt2986vzh.cloudfront.net/unstable/lib/selectorgadget.js');document.body.appendChild(s);})();\">SelectorGadget</a>.\n\n## Use\n\nTo use it, open the page you want to scrape, then:\n\n1.  Click the SelectorGadget entry in your bookmark bar.\n\n2.  Click on the element you want to select.\n    SelectorGadget will make a first guess at what css selector you want.\n    It's likely to be bad since it only has one example to learn from, but it's a start.\n    Elements that match the selector will be highlighted in yellow.\n\n3.  Click on elements that **should not** be selected.\n    They will turn red.\n    Click on elements that **should** be selected.\n    They will turn green.\n\n4.  Iterate until only the elements you want are selected.\n    SelectorGadget is not perfect and sometimes will not be able to find a useful css selector.\n    Sometimes starting from a different element helps.\n\n\n# Example: Star wars\n\nFor example, imagine we want to find the names of the movies listed in `vignette(\"starwars\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nhtml <- read_html(\"https://rvest.tidyverse.org/articles/starwars.html\")\n```\n:::\n\n\n1.  Start by opening <https://rvest.tidyverse.org/articles/starwars.html> in a web browser.\n\n2.  Click on the SelectorGadget link in the bookmarks. The SelectorGadget console will appear at the bottom of the screen, and element currently under the mouse will be highlighted in orange.\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](images/selectorgadget-hover.png){width=400}\n    :::\n    :::\n\n\n3.  Click on the movie name to select it. The element you selected will be highlighted in green. SelectorGadget guesses which css selector you want (`h2` in this case), and highlights all matches in yellow (see total count equal to 7 as indicated on on the \"Clear\" button).\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](images/selectorgadget-click.png){width=400}\n    :::\n    :::\n\n\n4.  Scroll around the document to verify that we have selected all the desired movie titles and nothing else. In this case, it looks like SelectorGadget figured it out on the first try, and we can use the selector in our R code:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    html %>% \n      html_element(\"h2\") %>% \n      html_text2()\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"The Phantom Menace\"\n    ```\n    :::\n    :::\n\n\nNow let's try something a little more challenging: selecting all paragraphs of the movie intro.\n\n1.  Start the same way as before, opening the website and then using the SelectorGadget bookmark, but this time we click on the first paragraph of the intro.\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](images/selectorgadget-too-many.png){width=400}\n    :::\n    :::\n\n\n2.  This obviously selects too many elements, so click on one of the paragraphs that shouldn't match. It turns red indicating that this element shouldn't be matched.\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    ![](images/selectorgadget-remove.png){width=400}\n    :::\n    :::\n\n\n3.  This looks good, so we convert it to R code:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    html %>% \n      html_elements(\".crawl p\") %>% \n      html_text2() %>% \n      .[1:4]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"Turmoil has engulfed the Galactic Republic. The taxation of trade routes to outlying star systems is in dispute.\"                                                                                                               \n    [2] \"Hoping to resolve the matter with a blockade of deadly battleships, the greedy Trade Federation has stopped all shipping to the small planet of Naboo.\"                                                                         \n    [3] \"While the Congress of the Republic endlessly debates this alarming chain of events, the Supreme Chancellor has secretly dispatched two Jedi Knights, the guardians of peace and justice in the galaxy, to settle the conflict….\"\n    [4] \"There is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic.\"                                                                                                   \n    ```\n    :::\n    :::\n\n\nThis is correct, but we've lost the connection between title and intro.\nTo fix this problem we need to take a step back and see if we can find an element that identifies all the data for one movie.\nBy carefully hovering, we can figure out that the `section` selector seems to do the job:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilms <- html %>% html_elements(\"section\")\nfilms\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{xml_nodeset (7)}\n[1] <section><h2 data-id=\"1\">\\nThe Phantom Menace\\n</h2>\\n<p>\\nReleased: 1999 ...\n[2] <section><h2 data-id=\"2\">\\nAttack of the Clones\\n</h2>\\n<p>\\nReleased: 20 ...\n[3] <section><h2 data-id=\"3\">\\nRevenge of the Sith\\n</h2>\\n<p>\\nReleased: 200 ...\n[4] <section><h2 data-id=\"4\">\\nA New Hope\\n</h2>\\n<p>\\nReleased: 1977-05-25\\n ...\n[5] <section><h2 data-id=\"5\">\\nThe Empire Strikes Back\\n</h2>\\n<p>\\nReleased: ...\n[6] <section><h2 data-id=\"6\">\\nReturn of the Jedi\\n</h2>\\n<p>\\nReleased: 1983 ...\n[7] <section><h2 data-id=\"7\">\\nThe Force Awakens\\n</h2>\\n<p>\\nReleased: 2015- ...\n```\n:::\n:::\n\n\nThen we can get the title for each film:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilms %>% \n  html_element(\"h2\") %>% \n  html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The Phantom Menace\"      \"Attack of the Clones\"   \n[3] \"Revenge of the Sith\"     \"A New Hope\"             \n[5] \"The Empire Strikes Back\" \"Return of the Jedi\"     \n[7] \"The Force Awakens\"      \n```\n:::\n:::\n\n\nAnd the contents of that intro:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilms %>% \n  html_element(\".crawl\") %>% \n  html_text2() %>% \n  .[[1]] %>% \n  writeLines()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTurmoil has engulfed the Galactic Republic. The taxation of trade routes to outlying star systems is in dispute.\n\nHoping to resolve the matter with a blockade of deadly battleships, the greedy Trade Federation has stopped all shipping to the small planet of Naboo.\n\nWhile the Congress of the Republic endlessly debates this alarming chain of events, the Supreme Chancellor has secretly dispatched two Jedi Knights, the guardians of peace and justice in the galaxy, to settle the conflict….\n```\n:::\n:::\n\n\nThis is a pretty common experience --- SelectorGadget will get you started finding useful selectors but you will often have to combine it with other code.\n\n\n\n\n# Example: Book reviews\n\nDo we want to purchase a book on Amazon? \n\nWe will scrape [this page](https://www.amazon.com/dp/0387981403#customerReviews): it just contains the (first page of) reviews of the \nggplot2 book by Hadley Wickham. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://www.amazon.com/dp/0387981403#customerReviews\"\n```\n:::\n\n\nWe use the `rvest` package to download this page.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nh <- read_html(url)\n```\n:::\n\n\nNow `h` is an `xml_document` that contains the contents of the page:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{html_document}\n<html lang=\"en-us\" class=\"a-no-js\" data-19ax5a9jf=\"dingo\">\n[1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] <body class=\"a-m-us a-aui_72554-c a-aui_accordion_a11y_role_354025-c a-au ...\n```\n:::\n:::\n\n\nLet's use some CSS selectors. \n\nFor example, if you just wanted the titles, \nyou will end up with a selector that looks \nsomething like `.a-text-bold span`. \n\nYou can pipe\nyour HTML object along with that selector \ninto the `html_elements` function, to select \njust those elements and `html_text2()` to \nextract the plain text contents of an HTML element:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh %>%\n  html_elements(\".a-text-bold span\") %>% \n  html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Tippping point for R data visualization.\"                                                  \n[2] \"This classic book is now 49 (dog) years old...\"                                            \n[3] \"Must-have reference for R graphics\"                                                        \n[4] \"Not colour - and hence very expensive.\"                                                    \n[5] \"Hard-going\"                                                                                \n[6] \"Great book, but Amazon will send you a black & white copy\"                                 \n[7] \"A very friendly and systematic approach to get you working on the powerful ggplot2 engine.\"\n[8] \"Introduces nice graphics package for R programmers\"                                        \n```\n:::\n:::\n\n\n\nNext, let's grab the the number of stars and the review date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nh %>% \n  html_elements(\".review-rating\") %>% \n  html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"4.0 out of 5 stars\" \"3.0 out of 5 stars\" \"5.0 out of 5 stars\"\n[4] \"1.0 out of 5 stars\" \"3.0 out of 5 stars\" \"4.0 out of 5 stars\"\n[7] \"5.0 out of 5 stars\" \"4.0 out of 5 stars\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nh %>% \n  html_elements(\".review-date\") %>% \n  html_text2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Reviewed in the United States 🇺🇸 on May 21, 2011\"     \n[2] \"Reviewed in the United States 🇺🇸 on December 29, 2015\"\n[3] \"Reviewed in the United States 🇺🇸 on March 14, 2013\"   \n[4] \"Reviewed in the United Kingdom 🇬🇧 on April 12, 2016\"  \n[5] \"Reviewed in the United Kingdom 🇬🇧 on August 27, 2013\" \n[6] \"Reviewed in the United Kingdom 🇬🇧 on July 6, 2012\"    \n[7] \"Reviewed in the United Kingdom 🇬🇧 on July 5, 2013\"    \n[8] \"Reviewed in the United Kingdom 🇬🇧 on May 3, 2010\"     \n```\n:::\n:::\n\n\nUsint the extracted number of stars and whether or not someone\nfound a review useful. \n\nThis would help us decide if we were interested in purchasing the book! \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}