{
  "hash": "f1f9e1b898f3789ce16cb3e64208fb75",
  "result": {
    "markdown": "---\ntitle: \"Building dashboards with `flexdashboard` and `shinydashboard`\"\nauthor: \n  - name: Margaret Taub\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Introduction to building dashboards in R with `flexdashboard` and `shinydashboard`\"\ndate: 2022-12-13\ncategories: [module 4, week 8, data viz, flexdashboard, shinydashboard, dashboard, interactive]\n---\n\n\n<!-- Add interesting quote -->\n\n# Pre-lecture materials\n\n### Read ahead\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n1.  Information about creating dashboards: <https://rmarkdown.rstudio.com/flexdashboard/>\n2.  Example case study with associated dashboard from the Open Case Studies project: <https://www.opencasestudies.org/ocs-bp-school-shootings-dashboard/>\n:::\n\n### Prerequisites \n\nBefore starting you **must** install three additional packages:\n\n* `flexdashboard` - this provides tools for easily building dashboards\n* `DT` - this provides built-in data display functionality\n* `shiny` - this provides functionality to create interactive dashboard elements\n\nYou can do this by calling\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"flexdashboard\", \"DT\", \"shiny\"))\n```\n:::\n\n\nor use the \"Install Packages...\" option from the \"Tools\" menu in RStudio.\n\n\n### Acknowledgements\n\nSome of the material from today's class is adapted from \"R for Data Science\" by Grolemund and Wickham, sections [29.6](https://r4ds.had.co.nz/r-markdown-formats.html#dashboards) and [29.7.2](https://r4ds.had.co.nz/r-markdown-formats.html#shiny). It is based on lecture notes initially developed by Leah Jager.\n\nThe detailed example covered in the second part of class was developed as part of the Open Case Studies project which you can learn more about [here](https://americanhealth.jhu.edu/open-case-studies).\n\n# Learning objectives\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Know how to create a basic dashboard to display data analysis elements using `flexdashboard`\n-   Add interactive elements to your dashboard using tools from the `shiny` package\n-   Have resources to assist you in developing your own more complex dashboard to clearly present data and interactive elements\n:::\n\n# Introduction\n\nData dashboards allow you to communicate large amounts of information visually and quickly with the added benefit of allowing the user to interact with the data directly in the dashboard. **Flex dashboard** is a method of creating dashboards using R Markdown.  \n\nHere's an example of what a dashboard might look like:\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A screenshot of a dashboard created with flexdashboard](example_dashboard.png){fig-align='center' width=646}\n:::\n:::\n\n\n# Getting started\n\nTo create a new dashboard, use the menus at the top of RStudio cloud to select **File** --> **New File** --> **R Markdown...**  Choose **From Template** in the box on the left and then select **Flex Dashboard** from the box on the right. NOTE: This option will only appear once you have installed the `flexdashboard` package. Then click **OK**.  This will open up a dashboard template.  \n\nYou can knit this file just as you would a regular R Markdown document.  Let's do that and take a look at what you get!  Note you will have to save this file first before knitting.  Save it in your project directory as `trial_dashboard.Rmd` when prompted.\n\n# Layouts\n\nNotice the layout of the blank document is given by the hash (#) signs.  In general:\n\n* Each level 1 header (#) begins a *new page* in the dashboard.\n* Each level 2 header (##) begins a *new column*.\n* Each level 3 header (###) begins a *new row*.\n\nWhen you knit the blank document, you'll see blank output with a title (**Untitled**) and then three rows of charts (**Chart A**, **Chart B**, and **Chart C**.  Notice that in the code there are three sections with these titles, each designated with three hashes (###)).  Right now these charts are all blank, since these sections just have empty code chunks!\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Code to create the dashboard shown above](example_dashboard_code.png){fig-align='center' width=386}\n:::\n:::\n\n\n\nHere you can see there are two columns (designated by ##) and various rows within each column (designated with ###).  You can also find this code in the file `Diamond_dashboard_example.Rmd` in the directory with materials for this lecture. This code relies on the `DT` package that provides a nice way to display data on an HTML website.  \n\nNow open the file `Diamond_dashboard_example.Rmd` and knit it!  Be sure to open the resulting dashboard in a browser window to really see it; you won't be able to view it very well in the small viewer pane within RStudio.\n\nFeel free to play with the code in this diamond dashboard to see how things change when you knit it.  For example, can you change the titles of each of the graphs in the column on the left?  How could you change the first graph on the left to be a histogram of prices instead of carats?  Or could you add a fourth graph to the dashboard that shows price?  Note that to get access to the `diamonds` dataset that the dashboard uses, you will have to have loaded the `ggplot2` package, which is part of the `tidyverse`.  You can see that the dashboard uses this package by looking at the first set-up code chunk in the dashboard .Rmd file.\n\n# Shiny\n\nAdding the `shiny` package when creating your flex dashboard allows you to let your users change underlying parameters and see the results immediately on the dashboard without needing to re-knit the document.  Basically, using Shiny with flex dashboard turns a static R Markdown report into an Interactive Document. It’s important to note that interactive documents need to be deployed to a Shiny Server to be shared broadly. (See instructions for creating a free account at <http://www.shinyapps.io/> and instructions on how to publish to the web at the end of this document.)\n\nTo use `shiny` functionality in your data dashboard, you add the option `runtime: shiny` to the YAML header of your flex dashboard .Rmd file.  Once you've done this, you can use the “input” functions to add interactive components to the document.  You can have input that is text, numeric, selecting from a menu, or checking a box, as shown below.  (Don't run this code, it's just there to show you what the syntax looks like!)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntextInput(\"name\", \"What is your name?\")\nnumericInput(\"age\", \"How old are you?\", NA, min = 0, max = 150)\nselectInput(\"variable\", \"Variable:\",\n                  c(\"Cylinders (cyl)\" = \"cyl\",\n                    \"Transmission (am)\" = \"am\",\n                    \"Gears (gear)\" = \"gear\"))\ncheckboxInput(\"outliers\", \"Show outliers\", TRUE)\n```\n:::\n\n\nThe input values are stored in the object given by the first argument of these input functions.  So the text input is stored in an object called `name` and the numeric input is stored in an object called `age`.  You can then refer to the values with `input$name` and `input$age`, and the code that uses them will be automatically re-run whenever they change.\n\nThe second argument gives the text that is displayed to the user to prompt their input.  So the input area for name will show \"What is your name?\" and so on.  Later arguments for each type give additional information about that input, such as minimum and maximum allowed values for numeric input and menu options for the select input.  We will see this in the examples we will look at below.\n\nTo add Shiny components to a flex dashboard you must do the following:\n\n* Add `runtime: shiny` to the YAML header at the top of the document.\n* Add the `{.sidebar}` attribute to the first column of the dashboard to make it a host for Shiny input controls (note this step isn’t strictly required, but many Shiny based dashboards will want to do this).\n* Add Shiny inputs and outputs as appropriate using the input functions.\n* When including plots, be sure to wrap them in a call to `renderPlot`. This is important not only for dynamically responding to changes but also to ensure that they are automatically re-sized when their container changes.\n\n# Shiny examples\n\nThere are a couple examples of simple flex dashboards that use Shiny in the following files that are included with this project.  Open each one of these files and run it by clicking the \"Run document\" button that is where the \"Knit\" button usually is.  Shiny apps must be run rather than knitted, but the idea is the same!  Be sure to open the output in a browser tab.  \n\n* `GeyserFlexDashboard.Rmd`\n* `MPGFlexDashboard.Rmd`\n\nPlay with the user input options in the left hand sidebar to see how the user can interact with the data through the dashboard.  Then look at both the code and the output to see how the code relates to what is shown in the dashboard.  Play around with the options in the code chunks to be sure you understand what they do!  \n\nOne thing to point out in the `MPGFlexDashboard.Rmd` file is the following chunk of code:\n\n::: {.cell}\n\n```{.r .cell-code}\nformulaText <- reactive({\n    paste(\"mpg ~\", input$variable)\n  })\n```\n:::\n\n\nThis chunk of code allows the title of the graph to change depending on the input given by the user.  It uses the `reactive()` function to specify that the text is not static but will change depending on what is selected by the user.  You can see here the object `formulaText` will contain text consisting of pasting together \"mpg ~\" and the variable value selected from the user in the drop-down menu.  Then this `formulaText` object is used as the title in the plot! And even more importantly, it is used in the call to the `boxplot` function, to determine which variable to display in the plot.\n\n# A deeper dive into a more complex dashboard\n\nNow that we have covered the basics of `flexdashboard` and `shiny`, we will walk through a more complex example of a data dashboard.\nThis example will serve as good illustration/motivation for your upcoming project where you will be asked to perform a data analysis, and then create an interactive data dashboard based on that analysis.\n\nThe case study we will be looking at is part of the [Open Case Studies](https://americanhealth.jhu.edu/open-case-studies) project and focuses on issues related to gun control in the United States. \n\nThe Case Study itself, which goes through all the data analysis steps in detail can be found [here](https://www.opencasestudies.org/ocs-bp-school-shootings-dashboard/). This file also contains another presentation of the basic elements of building a dashboard with `flexdashboard` and `shiny`. The dashboard itself can be found [here](https://rsconnect.biostat.jhsph.edu/ocs-bp-school-shootings-dashboard/).\n\nThe GitHub repository for this case study can be found [here](https://github.com/opencasestudies/ocs-bp-school-shootings-dashboard) with the `.Rmd` file containing all the code to create the dashboard [here](https://github.com/opencasestudies/ocs-bp-school-shootings-dashboard/blob/master/ocs-school-shootings-flexdashboard.Rmd).\n\nWe will now walk through these resources.\n\n# Many other examples!\n\nYou can find lots and lots and lots of examples of more complicated flex dashboards (most of which use Shiny) [here](https://pkgs.rstudio.com/flexdashboard/articles/examples.html).  For each of these examples, you can click on the \"</> Source Code\" button in the upper right to see the R code that was used to create the dashboard.  If you pasted this code into a blank R Markdown document, you would be able to recreate the dashboard.\n\nI particularly like [this example](https://beta.rstudioconnect.com/jjallaire/htmlwidgets-ggplotly-geoms/htmlwidgets-ggplotly-geoms.html) which uses `plotly` to make interactive displays (something I have always wanted to learn, and which could be useful to enhance your upcoming Project), and [this one](https://jjallaire.shinyapps.io/shiny-ggplot2-brushing/) which illustrates brushing, another way of interacting with the displayed graphics.\n\n\n# Other Resources\n\n\n\n\n# Post-lecture materials\n\n### Final Questions\n\nHere are some post-lecture questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1.  Starting with the `GeyserFlexDashboard.Rmd` file, modify the file to also create a data display related to the `waiting` variable. This display could be on another tab, or you could create an entire new page. You could allow the user to specify if they want a histogram or a boxplot with a dropdown selector.\n2. Alternatively, keep the layout simple with a single pane for the plot, but allow the user to select whether they want to display a histogram of the `waiting` variable or the `eruptions` variable. Make sure to update the main plot label to indicate the selected variable.\n3. Similar modifications can be made to the `MPGFlexDashboard.Rmd` example. Create an interface that allows the user to select two different variables from the `mpg` data set and then create an appropriate data display to illustrate the relationship between these two variables, updating any plot labels to reflect the selected variables.\n:::\n\n### Additional Resources\n\n::: callout-tip\nBelow are instructions for getting a free `Shinyapps.io` account and then publishing your flex dashboard to the web:\n\n1. Sign up for a free account on [http://www.shinyapps.io/](http://www.shinyapps.io/)\n2. Within RStudio or RStudio Cloud, install the rsconnect package: `install.packages(\"rsconnect\")`\n3. Within RStudio Cloud, select \"Tools\" then \"Global Options...\" and then select \"Publishing\" from the left-hard menu.  (Within the non-cloud RStudio, under the \"Preferences\" menu, click on \"Publishing\".)  Click the \"Connect\" button next to the publishing accounts box and then \"Shinypps.io\" to link your shinyapps.io account to your RStudio.  Click on \"Shinyapps.io\" from the pop-up menu, and then follow the instructions to link your account. This involves copying and pasting a token from your account into the box in R Studio.\n4. Now you are ready to publish!  Click the \"Run Document\" button to create your app; then click \"Publish\" in the upper right hand corner of your app (the publish icon is a blue circle with blue curves around it). Choose \"Publish just this document\" from the pop-up menu.  Make sure the selected destination account is your shinyapps.io account.  You can change the name of the app if you want.  Then click publish!\n5. If you want to delete the app (unpublish it), you need to do this from within your shinyapps.io account.  Go to [http://www.shinyapps.io/](http://www.shinyapps.io/) and log in to your account.  Click on applications to manage your applications.  You must first archive your app before you can delete it.\n:::\n\n\n::: callout-tip\nHere are a list of resources on Shiny (more involved than Flex Dashboard):\n\n* Main page: <http://shiny.rstudio.com>\n* Awesome tutorial: <http://shiny.rstudio.com/tutorial/>\n* An example app that Ruthe (former Biostats ScM student) made in a class: <https://gunben.shinyapps.io/Pneumonia426/>\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}