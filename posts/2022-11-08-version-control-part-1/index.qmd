---
title: "Version control (Part 1)"
author: 
  - name: Lukas Weber
    url: https://lmweber.org/
    affiliation: Department of Biostatistics, Johns Hopkins Bloomberg School of Public Health
    affiliation_url: https://publichealth.jhu.edu
description: "Introduction to version control with git and GitHub (part 1)"
date: 2022-11-08
categories: [module 1, week 3, version control, git, GitHub]
---


# Pre-lecture materials

### Read ahead


::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

-   [Software Carpentry: Version Control with Git](https://swcarpentry.github.io/git-novice/)
:::


### Acknowledgements

Material for this lecture was borrowed and adopted from

-   [Software Carpentry: Version Control with Git](https://swcarpentry.github.io/git-novice/)


# Learning objectives


::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Understand the benefits of an automated version control system.
-   Understand the basics of how automated version control systems work.
-   Configure git the first time it is used on a computer.
-   Create a local git repository.
-   Describe the purpose of the `.git` directory.
-   Understand the modify-add-commit cycle for files.
-   Distinguish between descriptive and non-descriptive commit messages.
:::


# Introduction

::: callout-note
### Questions

-   What is version control and why should I use it?
:::


We'll start by exploring how version control can be used to keep track of what one person did and when.

For a nice illustration, we will refer to the [Software Carpentry: Version Control with Git](https://swcarpentry.github.io/git-novice/01-basics/index.html) lesson materials.


### Overview

We've all been in this situation before: it seems unnecessary to have multiple nearly-identical versions of the same document. Some word processors let us deal with this a little better, such as Microsoft Word's Track Changes or Google Docs' version history.

Version control systems start with a base version of the document and then record changes you make each step of the way.

For example, two users can make independent sets of changes on the same document.

Unless multiple users make changes to the same section of the document - a conflict - you can incorporate two sets of changes into the same base document.

A version control system is a tool that keeps track of these changes for us, effectively creating different versions of our files.

It allows us to decide which changes will be made to the next version (each record of these changes is called a commit), and keeps useful metadata about them. The complete history of commits for a particular project and their metadata make up a repository. Repositories can be kept in sync across different computers, facilitating collaboration among different people.


::: callout-note
### Terminology

1.  `commit`: a record of each set of changes in a document or file
2.  `repository`: the complete history of commits for a particular project and their metadata
:::


::: callout-note
### Key Points

1.  Version control is like an unlimited 'undo'.
2.  Version control also allows many people to work in parallel.
:::


# Setting Up Git

::: callout-note
### Questions

-   How do I get set up to use Git?
:::


When we use Git on a new computer for the first time, we need to configure a few things:

-   our name and email address
-   what our preferred text editor is
-   and that we want to use these settings globally (i.e. for every project).

On a command line, Git commands are written as `git verb options`, where `verb` is what we actually want to do and `options` is additional optional information.

Here is how to set up Git on a new laptop:

```
$ git config --global user.name "My Name"
$ git config --global user.email "myemail@email.com"
```

This user name and email will be associated with your subsequent Git activity after this lesson.

For this lesson, we will be interacting with GitHub and so the email address used should be the same as the one used when setting up your GitHub account.


### Check settings

You can check your settings at any time:

```
$ git config --list
```


::: callout-note
### Git Help and Manual

If you forget the options of a `git` command, you can type `git <command> -h` or access the corresponding Git manual by typing `git <command> --help`, e.g.:

```
$ git config -h
$ git config --help
```

You can press Q to exit the manual.

You can also get the list of available git commands and further resources of the Git manual typing:

```
$ git help
```
:::


# Creating a Repository

::: callout-note
### Questions

-   Where does Git store information?
:::


Once Git is configured, we can start using it.

First, let's create a new directory in the Desktop folder for our work and then change the current working directory to the newly created one:

```
cd ~/Desktop
mkdir planets
cd planets
pwd
```

Then we tell Git to make `planets` a repository – a place where Git can store versions of our files:

```
git init
```

Note that the creation of the `planets` directory and its initialization as a repository are completely separate processes.

If we use `ls` to show the directory's contents, it appears that nothing has changed:

```
ls
```

But if we add the `-a` flag to show everything, we can see that Git has created a hidden directory within planets called `.git`:

```
ls -a
```

Git uses this special subdirectory to store all the information about the project, including the tracked files and sub-directories located within the project's directory.

If we ever delete the `.git` subdirectory, we will lose the project's history.

Next, we will change the default branch to be called `main.` This might be the default branch depending on your settings and version of git.

```
git checkout -b main
```

We can check that everything is set up correctly by asking Git to tell us the status of our project:

```
git status
```


::: callout-note
### Correcting `git init` Mistakes

Suppose you have created the Git repository in the wrong directory, or made some other mistake.

You can delete the git repository by simply deleting the `.git` directory, either in Finder / Windows Explorer or from the command line:

```
rm -rf .git
```

But be careful! Running this command in the wrong directory will remove the entire Git history of a project you might want to keep. Therefore, always check your current directory using the command `pwd`.
:::


::: callout-note
### Key Points

-   `git init` initializes a repository.
-   Git stores all of its repository data in the `.git` directory.
:::


# Tracking Changes

::: callout-note
### Questions

-   How do I record changes in Git?
-   How do I check the status of my version control repository?
-   How do I record notes about what changes I made and why?
:::


First let's make sure we're still in the right directory. You should be in the `planets` directory.

```
cd ~/Desktop/planets
```


### Adding a new file

Let's create a file called `mars.txt` that contains some notes about the Red Planet's suitability as a base.

We will use `touch` to create the file, and then open it in TextEdit or Notepad. Alternatively, you can use a command-line text editor such as `nano`.

```
touch mars.txt
```

Navigate to the directory in Finder / Windows Explorer and open the `.txt` file in TextEdit / Notepad.

Type the text below into the `mars.txt` file:

```
Cold and dry, but everything is my favorite color
```

Let's first verify that the file was properly created by running the list command (`ls`):

```
ls
```

`mars.txt` contains a single line, which we can see by running:

```
cat mars.txt
```

If we check the status of our project again, Git tells us that it's noticed the new file:

```
git status
```

The "untracked files" message means that there's a file in the directory that Git isn't keeping track of. We can tell Git to track a file using `git add`:

```
git add mars.txt
```

and then check that the right thing happened:

```
git status
```

Git now knows that it's supposed to keep track of `mars.txt`, but it hasn't recorded these changes as a commit yet. To get it to do that, we need to run one more command:

```
git commit -m "Start notes on Mars as a base"
```

When we run git commit, Git takes everything we have told it to save by using `git add` and stores a copy permanently inside the special `.git` directory. This permanent copy is called a commit (or revision) and its short identifier is f22b25e. Your commit may have another identifier.

We use the `-m` flag (for "message") to record a short, descriptive, and specific comment that will help us remember later on what we did and why. If we just run `git commit` without the `-m` option, Git will launch `nano` (or whatever other editor is configured as `core.editor`) so that we can write a longer message.

Good commit messages start with a brief (<50 characters) statement about the changes made in the commit. Generally, the message should complete the sentence "If applied, this commit will". If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be.

If we run `git status` now:

```
git status
```

it tells us everything is up to date. If we want to know what we've done recently, we can ask Git to show us the project's history using `git log`:

```
git log
```

git log lists all commits made to a repository in reverse chronological order.


### Adding changes to a file

Now suppose we add more information to the file. (Again, we’ll edit with TextEdit / Notepad and then `cat` the file to show its contents.)

Paste the following text into the file:

```
Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
```

When we run `git status` now, it tells us that a file it already knows about has been modified:

```
git status
```

The last line is the key phrase: "no changes added to commit". We have changed this file, but we haven't told Git we will want to save those changes (which we do with `git add`) nor have we saved them (which we do with `git commit`).

So let's do that now. It is good practice to always review our changes before saving them. We do this using `git diff`. This shows us the differences between the current state of the file and the most recently saved version:

```
git diff
```

The output is cryptic because it is actually a series of commands for tools like editors and `patch` telling them how to reconstruct one file given the other.

After reviewing our change, it's time to commit it:

```
git commit -m "Add concerns about effects of Mars' moons on Wolfman"
```

Whoops: Git won't commit because we didn't use `git add` first. Let's fix that:

```
git add mars.txt
git commit -m "Add concerns about effects of Mars' moons on Wolfman"
```


# Post-lecture materials

### Final Questions

Here are some post-lecture questions to help you think about the material discussed.

::: callout-note
### Questions

1.  Add here.
:::

### Additional Resources

::: callout-tip
-   Add here.
:::

