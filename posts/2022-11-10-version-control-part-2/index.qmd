---
title: "Version control (Part 2)"
author: 
  - name: Lukas Weber
    url: https://lmweber.org
    affiliation: Department of Biostatistics, Johns Hopkins Bloomberg School of Public Health
    affiliation_url: https://publichealth.jhu.edu
description: "Introduction to version control with git and GitHub (part 2)"
date: 2022-11-10
categories: [module 1, week 3, version control, git, GitHub]
---


# Pre-lecture materials

::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

-   [Software Carpentry: Version Control with Git](https://swcarpentry.github.io/git-novice/)
:::


::: callout-note
## Read ahead

In the previous lesson, we learned how to use git from the command line.

In this lesson, we will learn how to use git remotes and GitHub. As preparation, you can sign up for a GitHub account if you do not already have one.

We will use the local git repository in the `planets` directory that we created in the previous lesson. If you do not have this any more, please create it by initializing the git repository and adding the set of git commits from the previous lesson.
:::


### Acknowledgements

Material for this lecture was borrowed and adopted from

-   [Software Carpentry: Version Control with Git](https://swcarpentry.github.io/git-novice/)


# Learning objectives


::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Understand git remotes.
-   Understand how to use GitHub.
:::


# Remotes in GitHub

::: callout-note
### Questions

-   How do I share my changes with others on the web?
:::


::: callout-note
### Objectives

-   Explain what remote repositories are and why they are useful.
-   Push to or pull from a remote repository.
:::


Version control really comes into its own when we begin to collaborate with other people. We already have most of the machinery we need to do this; the only thing missing is to copy changes from one repository to another.

Systems like Git allow us to move work between any two repositories. In practice, though, it's easiest to use one copy as a central hub, and to keep it on the web rather than on someone's laptop. Most programmers use hosting services like GitHub to hold those main copies.

Let's start by sharing the changes we've made to our current project (in the previous lesson) with the world. To this end we are going to create a _remote_ repository that will be linked to our local repository.


## Create a remote repository

Log in to GitHub, then click on the icon in the top right corner to create a new repository called `planets`.

(See [screenshots](https://swcarpentry.github.io/git-novice/07-github/index.html#1-create-a-remote-repository) on the Software Carpentry website.)


Name your repository "planets" and then click "Create Repository".

Note: Since this repository will be connected to a local repository, it needs to be empty. Leave "Initialize this repository with a README" unchecked, and keep "None" as options for both "Add .gitignore" and "Add a license." See the "GitHub License and README files" exercise in the Software Carpentry materials for a full explanation of why the repository needs to be empty.

(See [screenshots](https://swcarpentry.github.io/git-novice/07-github/index.html#1-create-a-remote-repository) on the Software Carpentry website.)


As soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository

(See [screenshots](https://swcarpentry.github.io/git-novice/07-github/index.html#1-create-a-remote-repository) on the Software Carpentry website.)


This effectively does the following on GitHub's servers:

```bash
mkdir planets
cd planets
git init
```


If you remember back to the earlier lesson where we added and committed our earlier work on `mars.txt`, we had a diagram of the local repository which looked like this:

(See [screenshots](https://swcarpentry.github.io/git-novice/07-github/index.html#1-create-a-remote-repository) on the Software Carpentry website.)


Now that we have two repositories, we need a diagram like this:

(See [screenshots](https://swcarpentry.github.io/git-novice/07-github/index.html#1-create-a-remote-repository) on the Software Carpentry website.)


Note that our local repository still contains our earlier work on `mars.txt`, but the remote repository on GitHub appears empty as it doesn't contain any files yet.

Check that we still have our history of commits in the git repository from the previous lesson:

```bash
cd ~/Desktop/planets
git log --oneline
```

```default
c687412 (HEAD -> main) Ignore data files and the results folder.
1507c2a Add some initial thoughts on spaceships
ad5b7d1 Discuss concerns about Mars' climate for Mummy
75a0e21 Add concerns about effects of Mars' moons on Wolfman
cf69058 Start notes on Mars as a base
```


## Connect local to remote repository

Now we connect the two repositories. We do this by making the GitHub repository a "remote" for the local repository. The home page of the repository on GitHub includes the URL string we need to identify it:

(See [screenshots](https://swcarpentry.github.io/git-novice/07-github/index.html#2-connect-local-to-remote-repository) on the Software Carpentry website.)


Click on the 'SSH' link to change the protocol from HTTPS to SSH.


::: callout-warning
### HTTPS vs. SSH

We use SSH here because, while it requires some additional configuration, it is a security protocol widely used by many applications. The steps below describe SSH at a minimum level for GitHub. A supplemental lesson in the Software Carpentry materials discusses advanced setup and concepts of SSH and key pairs, and other material supplemental to git related SSH.
:::


(See [screenshots](https://swcarpentry.github.io/git-novice/07-github/index.html#2-connect-local-to-remote-repository) on the Software Carpentry website.)


Copy that URL from the browser, go into the local `planets` repository, and run this command:

```bash
git remote add origin git@github.com:<username>/planets.git
```

Make sure to use the URL for your repository, i.e. your username.

`origin` is a local name used to refer to the remote repository. It could be called anything, but `origin` is a convention that is often used by default in git and GitHub, so it's helpful to stick with this unless there's a reason not to.

We can check that the command has worked by running `git remote -v`:

```bash
git remote -v
```

```default
origin   git@github.com:lmweber/planets.git (fetch)
origin   git@github.com:lmweber/planets.git (push)
```

We'll discuss remotes in more detail in the next section, while talking about how they might be used for collaboration.


## SSH Background and Setup

